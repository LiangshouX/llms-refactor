[
  {
    "id": 1,
    "file_name": "BINARY_SEARCH.java",
    "language_type": "java",
    "origin_code": "//Corrected package name from quixey to java_programs.extra;\n//package quixey;\npackage java_programs.extra;\n\nimport java.util.*;\n\npublic class BINARY_SEARCH {\n    public static int findFirstInSorted(int[] arr, int x) {\n        int lo = 0;\n        int hi = arr.length;\n\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n\n            if (x == arr[mid] && (mid == 0 || x != arr[mid - 1])) {\n                return mid;\n            } else if (x <= arr[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"BINARY_SEARCH.java\",\"violations\":[{\"description\":\"The utility class name 'BINARY_SEARCH' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like x\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'x' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like lo\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like hi\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'mid' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "origin_num_problem": 9,
    "new_code": "\r\npublic class BinarySearchUtil {\r\n    private BinarySearchUtil() {}\r\n\r\n    public static int findFirstInSorted(final int[] array, final int target) {\r\n        int low = 0;\r\n        int high = array.length;\r\n\r\n        while (low <= high) {\r\n            int mid = (low + high) / 2;\r\n\r\n            if (target == array[mid] && (mid == 0 || target != array[mid - 1])) {\r\n                return mid;\r\n            } else if (target <= array[mid]) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}",
    "new_report": "{\"fileName\":\"BINARY_SEARCH.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This class has only private constructors and may be final\",\"rule\":\"ClassWithOnlyPrivateConstructorsShouldBeFinal\",\"ruleSet\":\"Design\",\"priority\":1},{\"description\":\"Local variable 'mid' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":4}",
    "new_num_problem": 4,
    "is_same": 1,
    "description": "代码保留了之前的功能，仅进行了重构和命名调整，没有改变原始逻辑",
    "create_time": "2024-05-09 00:12:35",
    "update_time": "2024-05-13 07:07:35"
  },
  {
    "id": 2,
    "file_name": "BITCOUNT.java",
    "language_type": "java",
    "origin_code": "package java_programs;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class BITCOUNT {\n    public static int bitcount(int n) {\n    int count = 0;\n    while (n != 0) {\n        n = (n ^ (n - 1));\n        count++;\n    }\n    return count;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"BITCOUNT.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid reassigning parameters such as 'n'\",\"rule\":\"AvoidReassigningParameters\",\"ruleSet\":\"Best Practices\",\"priority\":2}],\"total\":3}",
    "origin_num_problem": 3,
    "new_code": "\r\npublic class BitCountUtils {\r\n    public static int countBits(int number) {\r\n        int bitCount = 0;\r\n        while (number != 0) {\r\n            number = (number ^ (number - 1));\r\n            bitCount++;\r\n        }\r\n        return bitCount;\r\n    }\r\n}",
    "new_report": "{\"fileName\":\"BITCOUNT.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid reassigning parameters such as 'number'\",\"rule\":\"AvoidReassigningParameters\",\"ruleSet\":\"Best Practices\",\"priority\":2}],\"total\":3}",
    "new_num_problem": 3,
    "is_same": 1,
    "description": "重构后的代码保留了原始代码的功能，仍然是计算给定整数中的位数。",
    "create_time": "2024-05-09 00:12:35",
    "update_time": "2024-05-13 07:07:37"
  },
  {
    "id": 3,
    "file_name": "BREADTH_FIRST_SEARCH.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\nimport java.util.ArrayDeque;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class BREADTH_FIRST_SEARCH {\n\n    public static Set<Node> nodesvisited = new HashSet<>();\n\n    public static boolean breadth_first_search(Node startnode, Node goalnode) {\n        Deque<Node> queue = new ArrayDeque<>();\n        queue.addLast(startnode);\n\n        nodesvisited.add(startnode);\n\n        while (true) {\n            Node node = queue.removeFirst();\n\n            if (node == goalnode) {\n                return true;\n            } else {\n                for (Node successor_node : node.getSuccessors()) {\n                    if (!nodesvisited.contains(successor_node)) {\n                        queue.addFirst(successor_node);\n                        nodesvisited.add(successor_node);\n                    }\n                }\n            }\n        }\n        /**\n         * The buggy program always drops into while(true) loop and will not return false\n         * Removed below line to fix compilation error\n         */\n        // return false;\n    }\n\n}",
    "origin_report": "{\"fileName\":\"BREADTH_FIRST_SEARCH.java\",\"violations\":[{\"description\":\"The utility class name 'BREADTH_FIRST_SEARCH' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Do not use non-final non-private static fields\",\"rule\":\"MutableStaticState\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'breadth_first_search' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'startnode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'goalnode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'queue' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'successor_node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "origin_num_problem": 9,
    "new_code": "package java_programs;\nimport java.util.*;\n\npublic class BreadthFirstSearch {\n\n    private static final Set<Node> nodesVisited = new HashSet<>();\n\n    public static boolean breadthFirstSearch(final Node startNode, final Node goalNode) {\n        Deque<Node> queue = new ArrayDeque<>();\n        queue.addLast(startNode);\n\n        nodesVisited.add(startNode);\n\n        while (!queue.isEmpty()) {\n            Node node = queue.removeFirst();\n\n            if (node == goalNode) {\n                return true;\n            } else {\n                for (Node successorNode : node.getSuccessors()) {\n                    if (!nodesVisited.contains(successorNode)) {\n                        queue.addFirst(successorNode);\n                        nodesVisited.add(successorNode);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n}",
    "new_report": "{\"fileName\":\"BREADTH_FIRST_SEARCH.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The constant name 'nodesVisited' doesn't match '[A-Z][A-Z_0-9]*'\",\"rule\":\"FieldNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'queue' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'successorNode' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":6}",
    "new_num_problem": 6,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仍然实现了广度优先搜索算法，并修复了之前存在的问题。",
    "create_time": "2024-05-09 00:12:35",
    "update_time": "2024-05-13 07:07:39"
  },
  {
    "id": 4,
    "file_name": "BUCKETSORT.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class BUCKETSORT {\n    public static ArrayList<Integer> bucketsort(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer> counts = new ArrayList<Integer>(Collections.nCopies(k,0));\n        for (Integer x : arr) {\n            counts.set(x,counts.get(x)+1);\n        }\n\n        ArrayList<Integer> sorted_arr = new ArrayList<Integer>(100);\n        int i = 0;\n        for (Integer count : arr) { // arr is counts in fixed version\n            sorted_arr.addAll(Collections.nCopies(count, i));\n            i++;\n        }\n\n        return sorted_arr;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"BUCKETSORT.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like k\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'k' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'counts' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(...)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'x' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'sorted_arr' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'sorted_arr' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like i\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'count' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":16}",
    "origin_num_problem": 16,
    "new_code": "import java.util.List;\n\npublic class BucketSort {\n    public static List<Integer> bucketsort(final List<Integer> arr, final int k) {\n        final List<Integer> counts = new ArrayList<>(Collections.nCopies(k, 0));\n        for (final Integer x : arr) {\n            counts.set(x, counts.get(x) + 1);\n        }\n\n        final List<Integer> sortedArr = new ArrayList<>();\n        int i = 0;\n        for (Integer count : counts) {\n            sortedArr.addAll(Collections.nCopies(count, i));\n            i++;\n        }\n\n        return sortedArr;\n    }\n}",
    "new_report": "{\"fileName\":\"BUCKETSORT.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like k\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like i\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'count' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "new_num_problem": 5,
    "is_same": 1,
    "description": "代码保留了之前的功能，只是进行了重构，包括修改类名为BucketSort、修改变量名、添加了参数final修饰符、修改了sorted_arr为sortedArr等",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:42"
  },
  {
    "id": 5,
    "file_name": "DEPTH_FIRST_SEARCH.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class DEPTH_FIRST_SEARCH {\n    public static boolean depth_first_search(Node startnode, Node goalnode) {\n        Set<Node> nodesvisited = new HashSet<>();\n        class Search {\n            boolean search(Node node) {\n                if (nodesvisited.contains(node)) {\n                    return false;\n                } else if (node == goalnode) {\n                    return true;\n                } else {\n                    for (Node successornodes : node.getSuccessors()) {\n                        if (search(successornodes)) { return true; }\n                    }\n                }\n                return false;\n            }\n        };\n\n        Search s = new Search();\n        return s.search(startnode);\n    }\n\n}\n",
    "origin_report": "{\"fileName\":\"DEPTH_FIRST_SEARCH.java\",\"violations\":[{\"description\":\"The utility class name 'DEPTH_FIRST_SEARCH' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'depth_first_search' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'startnode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'goalnode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'nodesvisited' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Each class should declare at least one constructor\",\"rule\":\"AtLeastOneConstructor\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Missing commented default access modifier on method 'search(Node)'\",\"rule\":\"CommentDefaultAccessModifier\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'node' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'successornodes' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Unnecessary semicolon\",\"rule\":\"UnnecessarySemicolon\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like s\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 's' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":16}",
    "origin_num_problem": 16,
    "new_code": "\r\npublic class DepthFirstSearch {\r\n    public static boolean depthFirstSearch(final Node startNode, final Node goalNode) {\r\n        Set<Node> nodesVisited = new HashSet<>();\r\n        class Search {\r\n            boolean search(Node node) {\r\n                if (nodesVisited.contains(node)) {\r\n                    return false;\r\n                } else if (node == goalNode) {\r\n                    return true;\r\n                } else {\r\n                    for (Node successorNode : node.getSuccessors()) {\r\n                        if (search(successorNode)) { return true; }\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n        };\r\n\r\n        Search searchOperation = new Search();\r\n        return searchOperation.search(startNode);\r\n    }\r\n}",
    "new_report": "{\"fileName\":\"DEPTH_FIRST_SEARCH.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Local variable 'nodesVisited' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Each class should declare at least one constructor\",\"rule\":\"AtLeastOneConstructor\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Missing commented default access modifier on method 'search(Node)'\",\"rule\":\"CommentDefaultAccessModifier\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'node' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'successorNode' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Unnecessary semicolon\",\"rule\":\"UnnecessarySemicolon\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'searchOperation' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":12}",
    "new_num_problem": 12,
    "is_same": 1,
    "description": "代码重构保留了原始代码的功能，只是进行了命名和格式上的调整",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:43"
  },
  {
    "id": 6,
    "file_name": "DETECT_CYCLE.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class DETECT_CYCLE {\n    public static boolean detect_cycle(Node node) {\n        Node hare = node;\n        Node tortoise = node;\n\n        while (true) {\n            if (hare.getSuccessor() == null)\n                return false;\n\n            tortoise = tortoise.getSuccessor();\n            hare = hare.getSuccessor().getSuccessor();\n\n            if (hare == tortoise)\n                return true;\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"DETECT_CYCLE.java\",\"violations\":[{\"description\":\"The utility class name 'DETECT_CYCLE' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'detect_cycle' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'node' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This statement should have braces\",\"rule\":\"ControlStatementBraces\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This statement should have braces\",\"rule\":\"ControlStatementBraces\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":7}",
    "origin_num_problem": 7,
    "new_code": "public class CycleDetectionUtils {\n    public static boolean detectCycle(final Node node) {\n        Node hare = node;\n        Node tortoise = node;\n\n        while (true) {\n            if (hare.getSuccessor() == null) {\n                return false;\n            }\n\n            tortoise = tortoise.getSuccessor();\n            hare = hare.getSuccessor().getSuccessor();\n\n            if (hare == tortoise) {\n                return true;\n            }\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"DETECT_CYCLE.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":3}",
    "new_num_problem": 3,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，只是将类名和方法名进行了修改。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:45"
  },
  {
    "id": 7,
    "file_name": "FIND_FIRST_IN_SORTED.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class FIND_FIRST_IN_SORTED {\n\n    public static int find_first_in_sorted(int[] arr, int x) {\n        int lo = 0;\n        int hi = arr.length;\n\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2; // check if this is floor division\n\n            if (x == arr[mid] && (mid == 0 || x != arr[mid-1])) {\n                return mid;\n            } else if (x <= arr[mid]) {\n                hi = mid;\n            } else {\n                lo = mid + 1;\n            }\n        }\n\n        return -1;\n    }\n\n}\n",
    "origin_report": "{\"fileName\":\"FIND_FIRST_IN_SORTED.java\",\"violations\":[{\"description\":\"The utility class name 'FIND_FIRST_IN_SORTED' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'find_first_in_sorted' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like x\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'x' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like lo\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like hi\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'mid' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":10}",
    "origin_num_problem": 10,
    "new_code": "public class BinarySearch {\n\n    public static int findFirstInSortedArray(final int[] array, final int target) {\n        int left = 0;\n        int right = array.length;\n\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n\n            if (target == array[mid] && (mid == 0 || target != array[mid-1])) {\n                return mid;\n            } else if (target <= array[mid]) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n\n        return -1;\n    }\n\n}",
    "new_report": "{\"fileName\":\"FIND_FIRST_IN_SORTED.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Local variable 'mid' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":4}",
    "new_num_problem": 4,
    "is_same": 1,
    "description": "重构后的代码保留了之前代码的功能，仍然是在排序的数组中查找第一个出现的指定元素的位置。只是进行了代码风格的调整和重命名，没有改变原有逻辑。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:47"
  },
  {
    "id": 8,
    "file_name": "FIND_IN_SORTED.java",
    "language_type": "java",
    "origin_code": "package java_programs;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class FIND_IN_SORTED {\n    public static int binsearch(int[] arr, int x, int start, int end) {\n        if (start == end) {\n            return -1;\n        }\n        int mid = start + (end - start) / 2; // check this is floor division\n        if (x < arr[mid]) {\n            return binsearch(arr, x, start, mid);\n        } else if (x > arr[mid]) {\n            return binsearch(arr, x, mid, end);\n        } else {\n            return mid;\n        }\n    }\n\n    public static int find_in_sorted(int[] arr, int x) {\n        return binsearch(arr, x, 0, arr.length);\n    }\n}\n",
    "origin_report": "{\"fileName\":\"FIND_IN_SORTED.java\",\"violations\":[{\"description\":\"The utility class name 'FIND_IN_SORTED' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like x\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'x' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'start' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'end' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'mid' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The static method name 'find_in_sorted' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like x\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'x' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":15}",
    "origin_num_problem": 15,
    "new_code": "public class BinarySearch {\n\n    public static int binarySearch(final int[] array, final int target, final int start, final int end) {\n        if (start == end) {\n            return -1;\n        }\n        final int mid = start + (end - start) / 2;\n        if (target < array[mid]) {\n            return binarySearch(array, target, start, mid);\n        } else if (target > array[mid]) {\n            return binarySearch(array, target, mid + 1, end);\n        } else {\n            return mid;\n        }\n    }\n\n    public static int findInSorted(final int[] array, final int target) {\n        return binarySearch(array, target, 0, array.length - 1);\n    }\n}",
    "new_report": "{\"fileName\":\"FIND_IN_SORTED.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "new_num_problem": 5,
    "is_same": 1,
    "description": "重构后的代码仍然保留了原始代码的功能，只是进行了些许修改，包括修改了类名和方法名，以及修复了二分查找的边界条件错误。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:49"
  },
  {
    "id": 9,
    "file_name": "FLATTEN.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class FLATTEN {\n    public static Object flatten(Object arr) {\n        if (arr instanceof ArrayList) {\n            ArrayList narr = (ArrayList) arr;\n            ArrayList result = new ArrayList(50);\n            for (Object x : narr) {\n                if (x instanceof ArrayList) {\n                    result.addAll((ArrayList) flatten(x));\n                } else {\n                    result.add(flatten(x));\n                }\n            }\n            return result;\n        } else {\n            return flatten(arr);\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"FLATTEN.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'narr' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'result' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Raw type use may be avoided by using a diamond: `new ArrayList<>(50)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'x' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "origin_num_problem": 9,
    "new_code": "import java.util.*;\n\npublic class FLATTEN {\n    public static List<Object> flatten(final Object arr) {\n        if (arr instanceof List) {\n            List<?> narr = (List<?>) arr;\n            List<Object> result = new ArrayList<>(50);\n            for (Object x : narr) {\n                if (x instanceof List) {\n                    result.addAll((List<?>) flatten(x));\n                } else {\n                    result.add(flatten(x));\n                }\n            }\n            return result;\n        } else {\n            return Collections.singletonList(arr);\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"FLATTEN.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Local variable 'narr' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'result' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'x' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":6}",
    "new_num_problem": 6,
    "is_same": 0,
    "description": "代码进行了重构，修复了原代码中的递归调用错误，原代码会导致栈溢出，而重构后的代码解决了这个问题",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:52"
  },
  {
    "id": 10,
    "file_name": "GCD.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class GCD {\n\n    public static int gcd(int a, int b) {\n        if (b == 0) {\n            return a;\n        } else {\n            return gcd(a % b, b);\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"GCD.java\",\"violations\":[{\"description\":\"Avoid short class names like GCD\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like a\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'a' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like b\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'b' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":7}",
    "origin_num_problem": 7,
    "new_code": "public class MathUtils {\n\n    private MathUtils() {\n        // private constructor to prevent instantiation\n    }\n\n    public static int greatestCommonDivisor(final int number1, final int number2) {\n        if (number2 == 0) {\n            return number1;\n        } else {\n            return greatestCommonDivisor(number1 % number2, number2);\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"GCD.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This class has only private constructors and may be final\",\"rule\":\"ClassWithOnlyPrivateConstructorsShouldBeFinal\",\"ruleSet\":\"Design\",\"priority\":1},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":3}",
    "new_num_problem": 3,
    "is_same": 1,
    "description": "重构后的代码保留了原始功能，仍然计算最大公约数。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:54"
  },
  {
    "id": 11,
    "file_name": "GET_FACTORS.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class GET_FACTORS {\n    public static ArrayList<Integer> get_factors(int n) {\n        if (n == 1) {\n            return new ArrayList<Integer>();\n        }\n        int max = (int)(Math.sqrt(n) + 1.0);\n        for (int i=2; i < max; i++) {\n            if (n % i == 0) {\n                ArrayList<Integer> prepend = new ArrayList<Integer>(0);\n                prepend.add(i);\n                prepend.addAll(get_factors(n / i));\n                return prepend;\n            }\n        }\n        return new ArrayList<Integer>();\n    }\n}\n",
    "origin_report": "{\"fileName\":\"GET_FACTORS.java\",\"violations\":[{\"description\":\"The utility class name 'GET_FACTORS' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"The static method name 'get_factors' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'n' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'max' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'prepend' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(0)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":16}",
    "origin_num_problem": 16,
    "new_code": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class FactorCalculator {\n    public static List<Integer> calculateFactors(int number) {\n        if (number == 1) {\n            return new ArrayList<>();\n        }\n        int max = (int) (Math.sqrt(number) + 1.0);\n        for (int i = 2; i < max; i++) {\n            if (number % i == 0) {\n                List<Integer> factors = new ArrayList<>();\n                factors.add(i);\n                factors.addAll(calculateFactors(number / i));\n                return factors;\n            }\n        }\n        return new ArrayList<>();\n    }\n}",
    "new_report": "{\"fileName\":\"GET_FACTORS.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'number' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'max' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'factors' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "new_num_problem": 9,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仍然是计算一个数的因子并返回",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:55"
  },
  {
    "id": 12,
    "file_name": "HANOI.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class HANOI {\n    // default start=1, end=3\n    public static List<Pair<Integer,Integer>> hanoi(int height, int start, int end) {\n        ArrayList<Pair<Integer,Integer>> steps = new ArrayList<Pair<Integer,Integer>>();\n\n        if (height > 0) {\n            PriorityQueue<Integer> crap_set = new PriorityQueue<Integer>();\n            crap_set.add(1);\n            crap_set.add(2);\n            crap_set.add(3);\n            crap_set.remove(start);\n            crap_set.remove(end);\n            int helper = crap_set.poll();\n            steps.addAll(hanoi(height-1, start, helper));\n            steps.add(new Pair<Integer,Integer>(start, helper));\n            steps.addAll(hanoi(height-1, helper, end));\n        }\n\n        return steps;\n    }\n\n\n    public static class Pair<F, S> {\n        private F first; //first member of pair\n        private S second; //second member of pair\n\n        public Pair(F first, S second) {\n            this.first = first;\n            this.second = second;\n        }\n\n        public void setFirst(F first) {\n            this.first = first;\n        }\n\n        public void setSecond(S second) {\n            this.second = second;\n        }\n\n        public F getFirst() {\n            return first;\n        }\n\n        public S getSecond() {\n            return second;\n        }\n\n        @Override\n        public String toString() {\n            return \"(\" + String.valueOf(first) + \", \" + String.valueOf(second) + \")\";\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"HANOI.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'height' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'start' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'end' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'steps' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'PriorityQueue'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'crap_set' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'crap_set' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new PriorityQueue<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'helper' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new Pair<>(start, helper)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid short class names like Pair\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"The class 'Pair' is suspected to be a Data Class (WOC=20.000%, NOPA=0, NOAM=4, WMC=6)\",\"rule\":\"DataClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'first' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'second' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'first' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'second' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"No need to call String.valueOf to append to a string.\",\"rule\":\"UselessStringValueOf\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"No need to call String.valueOf to append to a string.\",\"rule\":\"UselessStringValueOf\",\"ruleSet\":\"Performance\",\"priority\":3}],\"total\":21}",
    "origin_num_problem": 21,
    "new_code": "public class Hanoi {\n    public static List<Pair<Integer, Integer>> hanoi(final int height, final int start, final int end) {\n        List<Pair<Integer, Integer>> steps = new ArrayList<>();\n\n        if (height > 0) {\n            PriorityQueue<Integer> crapSet = new PriorityQueue<>();\n            crapSet.add(1);\n            crapSet.add(2);\n            crapSet.add(3);\n            crapSet.remove(start);\n            crapSet.remove(end);\n            int helper = crapSet.poll();\n            steps.addAll(hanoi(height - 1, start, helper));\n            steps.add(new Pair<>(start, helper));\n            steps.addAll(hanoi(height - 1, helper, end));\n        }\n\n        return steps;\n    }\n\n    public static class Pair<F, S> {\n        private final F first;\n        private final S second;\n\n        public Pair(F first, S second) {\n            this.first = first;\n            this.second = second;\n        }\n\n        public F getFirst() {\n            return first;\n        }\n\n        public S getSecond() {\n            return second;\n        }\n\n        @Override\n        public String toString() {\n            return \"(\" + first + \", \" + second + \")\";\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"HANOI.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Local variable 'steps' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'crapSet' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'helper' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid short class names like Pair\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"Parameter 'first' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'second' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":8}",
    "new_num_problem": 8,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，只是进行了代码风格的改进，包括更好的命名规范、使用diamond操作符、final关键字等，并未改变原有逻辑",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:07:58"
  },
  {
    "id": 13,
    "file_name": "IS_VALID_PARENTHESIZATION.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class IS_VALID_PARENTHESIZATION {\n    public static Boolean is_valid_parenthesization(String parens) {\n        int depth = 0;\n        for (int i = 0; i < parens.length(); i++) {\n            Character paren = parens.charAt(i);\n            if (paren.equals('(')) {\n                depth++;\n            } else {\n                depth--;\n                if (depth < 0) { return false; }\n            }\n        }\n        return true;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"IS_VALID_PARENTHESIZATION.java\",\"violations\":[{\"description\":\"The utility class name 'IS_VALID_PARENTHESIZATION' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'is_valid_parenthesization' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'parens' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'paren' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":6}",
    "origin_num_problem": 6,
    "new_code": "\r\npublic class ParenthesisValidator {\r\n    public static boolean isValidParenthesization(final String parentheses) {\r\n        int depth = 0;\r\n        for (int i = 0; i < parentheses.length(); i++) {\r\n            char paren = parentheses.charAt(i);\r\n            if (paren == '(') {\r\n                depth++;\r\n            } else {\r\n                depth--;\r\n                if (depth < 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return depth == 0;\r\n    }\r\n}",
    "new_report": "{\"fileName\":\"IS_VALID_PARENTHESIZATION.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Local variable 'paren' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "new_num_problem": 5,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仍然是检查括号字符串是否有效的功能，只是将类名和方法名进行了修改",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:00"
  },
  {
    "id": 14,
    "file_name": "KHEAPSORT.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class KHEAPSORT {\n    // import heapq\n    // heap is data structure used for priority queue\n    // pq O(log n) to pull off lowest priority item\n    // heap is a type of binary tree\n    // every node its value smaller than everything below it\n    // priority queue in java is least-value first (at head)\n\n    public static ArrayList<Integer> kheapsort(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<Integer>();\n        for (Integer v : arr.subList(0,k)) {\n            heap.add(v);\n        }\n\n        ArrayList<Integer> output = new ArrayList<Integer>();\n        for (Integer x : arr) {\n            heap.add(x);\n            Integer popped = heap.poll();\n            output.add(popped);\n        }\n\n        while (!heap.isEmpty()) {\n            output.add(heap.poll());\n        }\n\n        return output;\n\n    }\n}\n",
    "origin_report": "{\"fileName\":\"KHEAPSORT.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like k\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'k' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'PriorityQueue'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'heap' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new PriorityQueue<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'v' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'output' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'x' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'popped' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":15}",
    "origin_num_problem": 15,
    "new_code": "public final class KHeapsort {\n    public static List<Integer> kheapsort(final List<Integer> arr, final int k) {\n        PriorityQueue<Integer> heap = new PriorityQueue<>();\n        for (final Integer v : arr.subList(0, k)) {\n            heap.add(v);\n        }\n\n        List<Integer> output = new ArrayList<>();\n        for (final Integer x : arr) {\n            heap.add(x);\n            final Integer popped = heap.poll();\n            output.add(popped);\n        }\n\n        while (!heap.isEmpty()) {\n            output.add(heap.poll());\n        }\n\n        return output;\n    }\n}",
    "new_report": "{\"fileName\":\"KHEAPSORT.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like k\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'heap' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'output' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "new_num_problem": 5,
    "is_same": 1,
    "description": "重构后的代码保留了之前记住的代码的功能，仍然是使用k个堆排序对数组进行排序。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:02"
  },
  {
    "id": 15,
    "file_name": "KNAPSACK.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\nimport java.lang.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class KNAPSACK {\n    public static int knapsack(int capacity, int [][] items) {\n        int weight = 0, value = 0;\n        int n = items.length;\n        int memo[][] = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n ; i++)\n        {\n            if (i - 1 >= 0) {\n                weight = items[i - 1][0];\n                value = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++)\n            {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                }\n                else if (weight < j) {\n                    memo[i][j] = Math.max(memo[i - 1][j], value + memo[i - 1][j - weight]);\n                }\n                else {\n                    memo[i][j] = memo [i-1][j];\n                }\n\n            }\n        }\n        return memo[n][capacity];\n    }\n\n}\n",
    "origin_report": "{\"fileName\":\"KNAPSACK.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'capacity' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Parameter 'items' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Use one line for each declaration, it enhances code readability.\",\"rule\":\"OneDeclarationPerLine\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'n' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'memo' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":8}",
    "origin_num_problem": 8,
    "new_code": "public class Knapsack {\n    public static int knapsack(final int capacity, final int[][] items) {\n        int n = items.length;\n        int[][] memo = new int[n + 1][capacity + 1];\n\n        for (int i = 0; i <= n; i++) {\n            int itemWeight = 0, itemValue = 0;\n            if (i - 1 >= 0) {\n                itemWeight = items[i - 1][0];\n                itemValue = items[i - 1][1];\n            }\n            for (int j = 0; j <= capacity; j++) {\n                if (i == 0 || j == 0) {\n                    memo[i][j] = 0;\n                } else if (itemWeight < j) {\n                    memo[i][j] = Math.max(memo[i - 1][j], itemValue + memo[i - 1][j - itemWeight]);\n                } else {\n                    memo[i][j] = memo[i - 1][j];\n                }\n            }\n        }\n        return memo[n][capacity];\n    }\n}",
    "new_report": "{\"fileName\":\"KNAPSACK.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'n' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'memo' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Use one line for each declaration, it enhances code readability.\",\"rule\":\"OneDeclarationPerLine\",\"ruleSet\":\"Best Practices\",\"priority\":4}],\"total\":7}",
    "new_num_problem": 7,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，只是进行了一些格式上的调整和命名规范化",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:03"
  },
  {
    "id": 16,
    "file_name": "KTH.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n\n */\npublic class KTH {\n    public static Integer kth(ArrayList<Integer> arr, int k) {\n        int pivot = arr.get(0);\n        ArrayList<Integer> below, above;\n        below = new ArrayList<Integer>(arr.size());\n        above = new ArrayList<Integer>(arr.size());\n        for (Integer x : arr) {\n            if (x < pivot) {\n                below.add(x);\n            } else if (x > pivot) {\n                above.add(x);\n            }\n        }\n\n        int num_less = below.size();\n        int num_lessoreq = arr.size() - above.size();\n        if (k < num_less) {\n            return kth(below, k);\n        } else if (k >= num_lessoreq) {\n            return kth(above, k);\n        } else {\n            return pivot;\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"KTH.java\",\"violations\":[{\"description\":\"Avoid short class names like KTH\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like k\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'k' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'pivot' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Use one line for each declaration, it enhances code readability.\",\"rule\":\"OneDeclarationPerLine\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(arr.size())`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(arr.size())`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'x' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'num_less' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'num_less' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'num_lessoreq' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'num_lessoreq' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":18}",
    "origin_num_problem": 18,
    "new_code": "public class Kth {\n    public static Integer kth(final List<Integer> arr, final int k) {\n        final int pivot = arr.get(0);\n        final List<Integer> below = new ArrayList<>();\n        final List<Integer> above = new ArrayList<>();\n        for (final Integer x : arr) {\n            if (x < pivot) {\n                below.add(x);\n            } else if (x > pivot) {\n                above.add(x);\n            }\n        }\n\n        final int numLess = below.size();\n        final int numLessOrEq = arr.size() - above.size();\n        if (k < numLess) {\n            return kth(below, k);\n        } else if (k >= numLessOrEq) {\n            return kth(above, k);\n        } else {\n            return pivot;\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"KTH.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid short class names like Kth\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like k\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":6}",
    "new_num_problem": 6,
    "is_same": 1,
    "description": "代码保留了之前的功能，仍然实现了在给定数组中找到第k小的元素的功能",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:05"
  },
  {
    "id": 17,
    "file_name": "LCS_LENGTH.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class LCS_LENGTH {\n    public static Integer lcs_length(String s, String t) {\n        // make a Counter\n        // pair? no! just hashtable to a hashtable.. woo.. currying\n\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<Integer,Map<Integer,Integer>>();\n\n        // just set all the internal maps to 0\n        for (int i=0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<Integer,Integer>();\n            dp.put(i, initialize);\n            for (int j=0; j < t.length(); j++) {\n                Map<Integer,Integer> internal_map = dp.get(i);\n                internal_map.put(j,0);\n                dp.put(i, internal_map);\n            }\n        }\n\n        // now the actual code\n        for (int i=0; i < s.length(); i++) {\n            for (int j=0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n\n                    if (dp.containsKey(i-1)) {\n                        Map<Integer, Integer> internal_map = dp.get(i);\n                        int insert_value = dp.get(i-1).get(j) + 1;\n                        internal_map.put(j, insert_value);\n                        dp.put(i,internal_map);\n                    } else {\n                        Map<Integer, Integer> internal_map = dp.get(i);\n                        internal_map.put(j,1);\n                        dp.put(i,internal_map);\n                    }\n                }\n            }\n        }\n\n        if (!dp.isEmpty()) {\n            List<Integer> ret_list = new ArrayList<Integer>();\n            for (int i=0; i<s.length(); i++) {\n                ret_list.add(!dp.get(i).isEmpty() ? Collections.max(dp.get(i).values()) : 0);\n            }\n            return Collections.max(ret_list);\n        } else {\n            return 0;\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"LCS_LENGTH.java\",\"violations\":[{\"description\":\"The utility class name 'LCS_LENGTH' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The method 'lcs_length(String, String)' has a cognitive complexity of 21, current threshold is 15\",\"rule\":\"CognitiveComplexity\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The method 'lcs_length(String, String)' has a cyclomatic complexity of 10.\",\"rule\":\"CyclomaticComplexity\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'lcs_length' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid variables with short names like s\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 's' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like t\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 't' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like dp\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'dp' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new HashMap<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'initialize' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new HashMap<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'internal_map' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'internal_map' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'internal_map' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'internal_map' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'insert_value' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'insert_value' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'internal_map' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'internal_map' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid if (x != y) ..; else ..;\",\"rule\":\"ConfusingTernary\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'ret_list' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'ret_list' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid if (x != y) ..; else ..;\",\"rule\":\"ConfusingTernary\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":31}",
    "origin_num_problem": 31,
    "new_code": "public class LongestCommonSubsequence {\n    public static int findLongestCommonSubsequenceLength(String s, String t) {\n        Map<Integer, Map<Integer,Integer>> dp = new HashMap<>();\n\n        for (int i = 0; i < s.length(); i++) {\n            Map<Integer,Integer> initialize = new HashMap<>();\n            dp.put(i, initialize);\n            for (int j = 0; j < t.length(); j++) {\n                Map<Integer,Integer> internalMap = dp.get(i);\n                internalMap.put(j, 0);\n                dp.put(i, internalMap);\n            }\n        }\n\n        for (int i = 0; i < s.length(); i++) {\n            for (int j = 0; j < t.length(); j++) {\n                if (s.charAt(i) == t.charAt(j)) {\n                    int insertValue = 0;\n                    if (dp.containsKey(i-1)) {\n                        insertValue = dp.get(i-1).getOrDefault(j, 0) + 1;\n                    }\n                    Map<Integer, Integer> internalMap = dp.get(i);\n                    internalMap.put(j, insertValue);\n                    dp.put(i, internalMap);\n                }\n            }\n        }\n\n        List<Integer> resultList = new ArrayList<>();\n        for (int i = 0; i < s.length(); i++) {\n            resultList.add(dp.get(i).values().stream().max(Integer::compareTo).orElse(0));\n        }\n        return Collections.max(resultList);\n    }\n}",
    "new_report": "{\"fileName\":\"LCS_LENGTH.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like s\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 's' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like t\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 't' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like dp\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'dp' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'initialize' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Local variable 'internalMap' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'internalMap' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'resultList' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":13}",
    "new_num_problem": 13,
    "is_same": 1,
    "description": "代码保留了之前记住的功能，即计算两个字符串的最长公共子序列的长度。重构后的代码进行了一些变量命名和代码风格的优化，但功能没有改变。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:08"
  },
  {
    "id": 18,
    "file_name": "LEVENSHTEIN.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class LEVENSHTEIN {\n    public static int levenshtein(String source, String target) {\n        if (source.isEmpty() || target.isEmpty()) {\n            return source.isEmpty() ? target.length() : source.length();\n        } else if (source.charAt(0) == target.charAt(0)) {\n            return 1 + levenshtein(source.substring(1), target.substring(1));\n        } else {\n            return 1 + Math.min(Math.min(\n                    levenshtein(source,              target.substring(1)),\n                    levenshtein(source.substring(1), target.substring(1))),\n                    levenshtein(source.substring(1), target)\n        );\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"LEVENSHTEIN.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'source' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'target' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "origin_num_problem": 5,
    "new_code": "public class LevenshteinUtils {\n    private LevenshteinUtils() {\n        // private constructor to prevent instantiation\n    }\n\n    public static int levenshtein(final String source, final String target) {\n        if (source.isEmpty() || target.isEmpty()) {\n            return source.isEmpty() ? target.length() : source.length();\n        } else if (source.charAt(0) == target.charAt(0)) {\n            return 1 + levenshtein(source.substring(1), target.substring(1));\n        } else {\n            return 1 + Math.min(Math.min(\n                    levenshtein(source, target.substring(1)),\n                    levenshtein(source.substring(1), target.substring(1)),\n                    levenshtein(source.substring(1), target)\n            ));\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"LEVENSHTEIN.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This class has only private constructors and may be final\",\"rule\":\"ClassWithOnlyPrivateConstructorsShouldBeFinal\",\"ruleSet\":\"Design\",\"priority\":1},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":4}",
    "new_num_problem": 4,
    "is_same": 1,
    "description": "代码保留了之前的功能，仅仅是将原来的类 LEVENSHTEIN 改为了 LevenshteinUtils，并将构造方法设置为私有。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:10"
  },
  {
    "id": 19,
    "file_name": "LIS.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class LIS {\n    public static int lis(int[] arr) {\n        Map<Integer,Integer> ends = new HashMap<Integer, Integer>(100);\n        int longest = 0;\n\n        int i = 0;\n        for (int val : arr) {\n\n            ArrayList<Integer> prefix_lengths = new ArrayList<Integer>(100);\n            for (int j=1; j < longest+1; j++) {\n                if (arr[ends.get(j)] < val) {\n                    prefix_lengths.add(j);\n                }\n            }\n\n            int length = !prefix_lengths.isEmpty() ? Collections.max(prefix_lengths) : 0;\n\n            if (length == longest || val < arr[ends.get(length+1)]) {\n                ends.put(length+1, i);\n                longest = length + 1;\n            }\n\n            i++;\n        }\n        return longest;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"LIS.java\",\"violations\":[{\"description\":\"Avoid short class names like LIS\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'ends' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new HashMap<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like i\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'val' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'prefix_lengths' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'prefix_lengths' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'length' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid if (x != y) ..; else ..;\",\"rule\":\"ConfusingTernary\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":16}",
    "origin_num_problem": 16,
    "new_code": "public class LongestIncreasingSubsequence {\n    public static int findLengthOfLIS(final int[] nums) {\n        final Map<Integer, Integer> ends = new HashMap<>(100);\n        int longestLength = 0;\n\n        int index = 0;\n        for (final int num : nums) {\n\n            final List<Integer> prefixLengths = new ArrayList<>(100);\n            for (int j = 1; j < longestLength + 1; j++) {\n                if (nums[ends.get(j)] < num) {\n                    prefixLengths.add(j);\n                }\n            }\n\n            final int length = !prefixLengths.isEmpty() ? Collections.max(prefixLengths) : 0;\n\n            if (length == longestLength || num < nums[ends.get(length + 1)]) {\n                ends.put(length + 1, index);\n                longestLength = length + 1;\n            }\n\n            index++;\n        }\n        return longestLength;\n    }\n}",
    "new_report": "{\"fileName\":\"LIS.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Avoid if (x != y) ..; else ..;\",\"rule\":\"ConfusingTernary\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "new_num_problem": 5,
    "is_same": 1,
    "description": "重构后的代码保留了之前代码的功能，只是对变量和类名进行了修改，但逻辑和算法保持不变。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:12"
  },
  {
    "id": 20,
    "file_name": "LONGEST_COMMON_SUBSEQUENCE.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class LONGEST_COMMON_SUBSEQUENCE {\n    public static String longest_common_subsequence(String a, String b) {\n        if (a.isEmpty() || b.isEmpty()) {\n            return \"\";\n        } else if (a.charAt(0) == b.charAt(0)) {\n            return a.charAt(0) + longest_common_subsequence(a.substring(1), b);\n        } else {\n            String fst = longest_common_subsequence(a, b.substring(1));\n            String snd = longest_common_subsequence(a.substring(1), b);\n            return fst.length() >= snd.length() ? fst : snd;\n        }\n\n    }\n\n}\n",
    "origin_report": "{\"fileName\":\"LONGEST_COMMON_SUBSEQUENCE.java\",\"violations\":[{\"description\":\"The utility class name 'LONGEST_COMMON_SUBSEQUENCE' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'longest_common_subsequence' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid variables with short names like a\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'a' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like b\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'b' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'fst' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'snd' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":11}",
    "origin_num_problem": 11,
    "new_code": "\r\npublic class LongestCommonSubsequenceUtil {\r\n    public static String findLongestCommonSubsequence(String firstString, String secondString) {\r\n        if (firstString.isEmpty() || secondString.isEmpty()) {\r\n            return \"\";\r\n        } else if (firstString.charAt(0) == secondString.charAt(0)) {\r\n            return firstString.charAt(0) + findLongestCommonSubsequence(firstString.substring(1), secondString);\r\n        } else {\r\n            String first = findLongestCommonSubsequence(firstString, secondString.substring(1));\r\n            String second = findLongestCommonSubsequence(firstString.substring(1), secondString);\r\n            return first.length() >= second.length() ? first : second;\r\n        }\r\n    }\r\n}",
    "new_report": "{\"fileName\":\"LONGEST_COMMON_SUBSEQUENCE.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'firstString' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'secondString' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'first' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'second' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":8}",
    "new_num_problem": 8,
    "is_same": 1,
    "description": "重构后的代码保留了之前记住的功能，只是做了一些命名和格式上的调整，没有改变原有逻辑",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:14"
  },
  {
    "id": 21,
    "file_name": "MAXIMUM_WEIGHTED_SUBSET.java",
    "language_type": "java",
    "origin_code": "//Corrected package name from quixey to java_programs.extra;\n//package quixey;\npackage java_programs.extra;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class MAXIMUM_WEIGHTED_SUBSET {\n    public static int maxSubsetWeight(int[] weights, int bound) {\n        if (weights.length == 0) {\n            return 0;\n        }\n        int[][] maxWeight = new int[weights.length][bound];\n        for (int w = 0; w <= bound; w++)\n            maxWeight[0][w] = weights[0] <= w ? weights[0] : 0;\n\n        for (int i = 1; i < weights.length; i++) {\n            for (int w = 0; w <= bound; w++) {\n                if (weights[i] > w) {\n                    maxWeight[i][w] = maxWeight[i-1][w];\n                } else {\n                    int include = weights[i] + maxWeight[i-1][w - weights[i]];\n                    int exclude = maxWeight[i-1][w];\n                    maxWeight[i][w] = Math.max(include, exclude);\n                }\n            }\n        }\n        return maxWeight[weights.length-1][bound];\n    }\n}\n",
    "origin_report": "{\"fileName\":\"MAXIMUM_WEIGHTED_SUBSET.java\",\"violations\":[{\"description\":\"The utility class name 'MAXIMUM_WEIGHTED_SUBSET' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'weights' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'bound' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'maxWeight' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This statement should have braces\",\"rule\":\"ControlStatementBraces\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'include' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'exclude' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "origin_num_problem": 9,
    "new_code": "\r\npublic class MaximumWeightedSubsetUtility {\r\n    public static int maxSubsetWeight(final int[] weights, final int bound) {\r\n        if (weights.length == 0) {\r\n            return 0;\r\n        }\r\n        int[][] maxWeight = new int[weights.length][bound + 1];\r\n        for (int w = 0; w <= bound; w++) {\r\n            maxWeight[0][w] = weights[0] <= w ? weights[0] : 0;\r\n        }\r\n\r\n        for (int i = 1; i < weights.length; i++) {\r\n            for (int w = 0; w <= bound; w++) {\r\n                if (weights[i] > w) {\r\n                    maxWeight[i][w] = maxWeight[i-1][w];\r\n                } else {\r\n                    int include = weights[i] + maxWeight[i-1][w - weights[i]];\r\n                    int exclude = maxWeight[i-1][w];\r\n                    maxWeight[i][w] = Math.max(include, exclude);\r\n                }\r\n            }\r\n        }\r\n        return maxWeight[weights.length-1][bound];\r\n    }\r\n}",
    "new_report": "{\"fileName\":\"MAXIMUM_WEIGHTED_SUBSET.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'maxWeight' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'include' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'exclude' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":6}",
    "new_num_problem": 6,
    "is_same": 1,
    "description": "重构后的代码保留了原始代码的功能，仅修改了类名和方法为静态方法，没有改变算法逻辑。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:16"
  },
  {
    "id": 22,
    "file_name": "MAX_SUBLIST_SUM.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class MAX_SUBLIST_SUM {\n    public static int max_sublist_sum(int[] arr) {\n        int max_ending_here = 0;\n        int max_so_far = 0;\n\n        for (int x : arr) {\n            max_ending_here = max_ending_here + x;\n            max_so_far = Math.max(max_so_far, max_ending_here);\n        }\n\n        return max_so_far;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"MAX_SUBLIST_SUM.java\",\"violations\":[{\"description\":\"The utility class name 'MAX_SUBLIST_SUM' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'max_sublist_sum' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'max_ending_here' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"The local variable name 'max_so_far' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'x' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":8}",
    "origin_num_problem": 8,
    "new_code": "public class MaxSublistSumUtility {\n    private MaxSublistSumUtility() {}\n\n    public static int calculateMaxSublistSum(int... nums) {\n        int maxEndingHere = 0;\n        int maxSoFar = 0;\n\n        for (int num : nums) {\n            maxEndingHere = Math.max(num, maxEndingHere + num);\n            maxSoFar = Math.max(maxSoFar, maxEndingHere);\n        }\n\n        return maxSoFar;\n    }\n}",
    "new_report": "{\"fileName\":\"MAX_SUBLIST_SUM.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This class has only private constructors and may be final\",\"rule\":\"ClassWithOnlyPrivateConstructorsShouldBeFinal\",\"ruleSet\":\"Design\",\"priority\":1},{\"description\":\"Parameter 'nums' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'num' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":4}",
    "new_num_problem": 4,
    "is_same": 1,
    "description": "重构后的代码保留了原始代码的功能，仅是将类名和方法名进行了更具可读性的重命名，并且添加了私有构造方法来避免实例化该类。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:19"
  },
  {
    "id": 23,
    "file_name": "MERGESORT.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class MERGESORT {\n    public static ArrayList<Integer> merge(ArrayList<Integer> left, ArrayList<Integer> right) {\n    //System.out.println(String.valueOf(left));\n    //System.out.println(String.valueOf(right));\n    //System.out.println(String.valueOf(left.getClass()));\n    //System.out.println(String.valueOf(left.get(0)));\n    //System.out.println(String.valueOf(left.get(0).getClass()));\n        ArrayList<Integer> result = new ArrayList<Integer>(100);\n        int i = 0;\n        int j = 0;\n\n        while (i < left.size() && j < right.size()) {\n            if (left.get(i) <= right.get(j)) {\n                result.add(left.get(i));\n                i++;\n            } else {\n                result.add(right.get(j));\n                j++;\n            }\n        }\n        result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n        return result;\n    }\n\n    public static ArrayList<Integer> mergesort(ArrayList<Integer> arr) {\n        if (arr.size() == 0) { // <= 1 in correct version\n            return arr;\n        } else {\n            int middle = arr.size() / 2;\n            ArrayList<Integer> left = new ArrayList<Integer>(100);\n            left.addAll(arr.subList(0,middle));\n            left = mergesort(left);\n            ArrayList<Integer> right = new ArrayList<Integer>(100);\n            right.addAll(arr.subList(middle, arr.size()));\n            right = mergesort(right);\n\n            return merge(left, right);\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"MERGESORT.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'left' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'right' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'result' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like i\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like j\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()\",\"rule\":\"UseCollectionIsEmpty\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'middle' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":21}",
    "origin_num_problem": 21,
    "new_code": "public class MergeSort {\n    public static List<Integer> merge(List<Integer> left, List<Integer> right) {\n        List<Integer> result = new ArrayList<>();\n        int i = 0;\n        int j = 0;\n\n        while (i < left.size() && j < right.size()) {\n            if (left.get(i) <= right.get(j)) {\n                result.add(left.get(i));\n                i++;\n            } else {\n                result.add(right.get(j));\n                j++;\n            }\n        }\n        result.addAll(left.subList(i,left.size()).isEmpty() ? right.subList(j, right.size()) : left.subList(i, left.size()));\n        return result;\n    }\n\n    public static List<Integer> mergeSort(List<Integer> arr) {\n        if (arr.size() <= 1) {\n            return arr;\n        } else {\n            int middle = arr.size() / 2;\n            List<Integer> left = new ArrayList<>();\n            left.addAll(arr.subList(0, middle));\n            left = mergeSort(left);\n            List<Integer> right = new ArrayList<>();\n            right.addAll(arr.subList(middle, arr.size()));\n            right = mergeSort(right);\n\n            return merge(left, right);\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"MERGESORT.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'left' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'right' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'result' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like i\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like j\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'middle' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":11}",
    "new_num_problem": 11,
    "is_same": 1,
    "description": "代码保留了之前的功能，仍然包括merge和mergesort两个方法，只是进行了一些重构，如修改类名、方法名以及参数类型，但逻辑和功能保持不变",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:21"
  },
  {
    "id": 24,
    "file_name": "MINIMUM_SPANNING_TREE.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/**\n * Minimum spanning tree\n */\npublic class MINIMUM_SPANNING_TREE {\n    public static Set<WeightedEdge> minimum_spanning_tree(List<WeightedEdge> weightedEdges) {\n        Map<Node,Set<Node>> groupByNode = new HashMap<>();\n        Set<WeightedEdge> minSpanningTree = new HashSet<>();\n\n        Collections.sort(weightedEdges);\n\n        for (WeightedEdge edge : weightedEdges) {\n            Node vertex_u = edge.node1;\n            Node vertex_v = edge.node2;\n            //System.out.printf(\"u: %s, v: %s weight: %d\\n\", vertex_u.getValue(), vertex_v.getValue(), edge.weight);\n            if (!groupByNode.containsKey(vertex_u)){\n                groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n            }\n            if (!groupByNode.containsKey(vertex_v)){\n                groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n            }\n\n            if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                minSpanningTree.add(edge);\n                groupByNode = update(groupByNode, vertex_u, vertex_v);\n                for (Node node : groupByNode.get(vertex_v)) {\n                    groupByNode = update(groupByNode, node, vertex_u);\n                }\n            }\n        }\n        return minSpanningTree;\n    }\n\n    public static Map<Node,Set<Node>> update(Map<Node,Set<Node>> groupByNode, Node vertex_u, Node vertex_v) {\n        Set<Node> vertex_u_span = groupByNode.get(vertex_u);\n        vertex_u_span.addAll(groupByNode.get(vertex_v));\n\n        return groupByNode;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"MINIMUM_SPANNING_TREE.java\",\"violations\":[{\"description\":\"The utility class name 'MINIMUM_SPANNING_TREE' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'minimum_spanning_tree' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'weightedEdges' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'minSpanningTree' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'vertex_u' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'vertex_u' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'vertex_v' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'vertex_v' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Comment is too large: Line too long\",\"rule\":\"CommentSize\",\"ruleSet\":\"Documentation\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Use equals() to compare object references.\",\"rule\":\"CompareObjectsWithEquals\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'groupByNode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'vertex_u' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'vertex_u' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'vertex_v' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'vertex_v' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'vertex_u_span' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'vertex_u_span' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1}],\"total\":23}",
    "origin_num_problem": 23,
    "new_code": "package javaPrograms;\n\nimport java.util.*;\n\n/**\n * Minimum spanning tree\n */\npublic class MinimumSpanningTree {\n    public static Set<WeightedEdge> minimumSpanningTree(List<WeightedEdge> weightedEdges) {\n        Map<Node, Set<Node>> groupByNode = new HashMap<>();\n        Set<WeightedEdge> minSpanningTree = new HashSet<>();\n\n        Collections.sort(weightedEdges);\n\n        for (WeightedEdge edge : weightedEdges) {\n            Node vertex_u = edge.node1;\n            Node vertex_v = edge.node2;\n\n            if (!groupByNode.containsKey(vertex_u)) {\n                groupByNode.put(vertex_u, new HashSet<>(Arrays.asList(vertex_u)));\n            }\n            if (!groupByNode.containsKey(vertex_v)) {\n                groupByNode.put(vertex_v, new HashSet<>(Arrays.asList(vertex_v)));\n            }\n\n            if (groupByNode.get(vertex_u) != groupByNode.get(vertex_v)) {\n                minSpanningTree.add(edge);\n                groupByNode = update(groupByNode, vertex_u, vertex_v);\n                for (Node node : groupByNode.get(vertex_v)) {\n                    groupByNode = update(groupByNode, node, vertex_u);\n                }\n            }\n        }\n        return minSpanningTree;\n    }\n\n    public static Map<Node, Set<Node>> update(Map<Node, Set<Node>> groupByNode, Node vertex_u, Node vertex_v) {\n        Set<Node> vertex_u_span = groupByNode.get(vertex_u);\n        vertex_u_span.addAll(groupByNode.get(vertex_v));\n\n        return groupByNode;\n    }\n}",
    "new_report": "{\"fileName\":\"MINIMUM_SPANNING_TREE.java\",\"violations\":[{\"description\":\"Package name contains upper case characters\",\"rule\":\"PackageCase\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'weightedEdges' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'minSpanningTree' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'vertex_u' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'vertex_u' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'vertex_v' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'vertex_v' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Use equals() to compare object references.\",\"rule\":\"CompareObjectsWithEquals\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'groupByNode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'vertex_u' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'vertex_u' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'vertex_v' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'vertex_v' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'vertex_u_span' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'vertex_u_span' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1}],\"total\":21}",
    "new_num_problem": 21,
    "is_same": 1,
    "description": "重构后的代码保留了之前代码的功能，仍然实现了最小生成树算法，并对代码进行了格式化和命名规范化",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:24"
  },
  {
    "id": 25,
    "file_name": "MODULO_INVERSE.java",
    "language_type": "java",
    "origin_code": "//Corrected package name from quixey to java_programs.extra;\n//package quixey;\npackage java_programs.extra;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class MODULO_INVERSE {\n    public static int inverse(int base, int mod) {\n            if(base == 1) {\n            return base;\n        } else {\n            int coeff = base - inverse(mod % base, base);\n            return (coeff*mod) / base;\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"MODULO_INVERSE.java\",\"violations\":[{\"description\":\"The utility class name 'MODULO_INVERSE' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'base' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'mod' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'coeff' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Useless parentheses.\",\"rule\":\"UselessParentheses\",\"ruleSet\":\"Code Style\",\"priority\":4}],\"total\":8}",
    "origin_num_problem": 8,
    "new_code": "\r\npackage java_programs.extra;\r\n\r\npublic class ModuloInverse {\r\n    public static int inverse(int base, int mod) {\r\n        if (base == 1) {\r\n            return base;\r\n        } else {\r\n            int coeff = base - inverse(mod % base, base);\r\n            return (coeff * mod) / base;\r\n        }\r\n    }\r\n}",
    "new_report": "{\"fileName\":\"MODULO_INVERSE.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'base' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'mod' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'coeff' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Useless parentheses.\",\"rule\":\"UselessParentheses\",\"ruleSet\":\"Code Style\",\"priority\":4}],\"total\":7}",
    "new_num_problem": 7,
    "is_same": 1,
    "description": "代码保留了之前的功能，仅仅是将包名从quixey更改为java_programs.extra，并对类名进行了调整。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:26"
  },
  {
    "id": 26,
    "file_name": "NESTED_PARENS.java",
    "language_type": "java",
    "origin_code": "//Corrected package name from quixey to java_programs.extra;\n//package quixey;\npackage java_programs.extra;\nimport java.util.*;\n\npublic class NESTED_PARENS {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String S = in.next();\n        int[] num = new int[S.length()];\n        for(int i=0; i<S.length(); i++)\n            num[i] = S.charAt(i)=='(' ? 1 : -1;\n\n        System.out.println(is_properly_nested(num)==1 ? \"GOOD\" : \"BAD\");\n    }\n\n    public static int is_properly_nested(int[] A) {\n        int bad = 0;\n        int depth = 0;\n        int i = 0;\n        while(i < A.length) {\n            depth += A[i];\n            if(depth < 0) { bad = 1; }\n            i+=1;\n        }\n        if(bad==0) return 1;\n        else return 0;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"NESTED_PARENS.java\",\"violations\":[{\"description\":\"The utility class name 'NESTED_PARENS' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like in\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Ensure that resources like this Scanner object are closed after use\",\"rule\":\"CloseResource\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Local variable 'in' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like S\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'S' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'S' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'num' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This statement should have braces\",\"rule\":\"ControlStatementBraces\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Usage of System.out/err\",\"rule\":\"SystemPrintln\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"The static method name 'is_properly_nested' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Avoid variables with short names like A\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'A' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'A' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid variables with short names like i\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This statement should have braces\",\"rule\":\"ControlStatementBraces\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This statement should have braces\",\"rule\":\"ControlStatementBraces\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":20}",
    "origin_num_problem": 20,
    "new_code": "package java_programs.extra;\n\nimport java.util.Scanner;\n\npublic class NestedParens {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        String S = in.next();\n        int[] num = new int[S.length()];\n        for (int i = 0; i < S.length(); i++)\n            num[i] = S.charAt(i) == '(' ? 1 : -1;\n\n        System.out.println(isProperlyNested(num) == 1 ? \"GOOD\" : \"BAD\");\n    }\n\n    public static int isProperlyNested(int[] A) {\n        int bad = 0;\n        int depth = 0;\n        int i = 0;\n        while (i < A.length) {\n            depth += A[i];\n            if (depth < 0) {\n                bad = 1;\n            }\n            i += 1;\n        }\n        return bad == 0 ? 1 : 0;\n    }\n}",
    "new_report": "{\"fileName\":\"NESTED_PARENS.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like in\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Ensure that resources like this Scanner object are closed after use\",\"rule\":\"CloseResource\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Local variable 'in' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like S\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'S' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'S' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'num' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This statement should have braces\",\"rule\":\"ControlStatementBraces\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Usage of System.out/err\",\"rule\":\"SystemPrintln\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"Linguistics Antipattern - The method 'isProperlyNested' indicates linguistically it returns a boolean, but it returns 'int'\",\"rule\":\"LinguisticNaming\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Avoid variables with short names like A\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'A' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'A' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid variables with short names like i\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":16}",
    "new_num_problem": 16,
    "is_same": 1,
    "description": "代码保留了之前的功能，仅进行了包名的更改和方法命名的调整，没有改变原始代码的逻辑和功能。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:28"
  },
  {
    "id": 27,
    "file_name": "NESTED_PARENS_orig.java",
    "language_type": "java",
    "origin_code": "//Corrected package name from quixey to java_programs.extra;\n//package quixey;\npackage java_programs.extra;\nimport java.util.*;\nimport java.io.*;\nimport java.awt.Point;\nimport static java.lang.Math.*;\n\n//Corrected class from from NESTED_PARENS to NESTED_PARENS_orig\npublic class NESTED_PARENS_orig {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        CAS: while(in.hasNext()) {\n            String parens = in.next();\n            int depth = 0;\n            for(int i=0; i < parens.length(); i++) {\n                if(parens.charAt(i) == '(') {\n                    depth++;\n                } else {\n                    depth--;\n                    if(depth < 0) {\n                        System.out.println(\"0\");\n                        continue CAS;\n                    }\n                }\n            }\n            System.out.println(depth == 0 ? \"1\" : \"0\");\n        }\n    }\n\n    public static <T> List<T> list() { return new ArrayList<T>(); }\n    public static <K,V> Map<K,V> map() { return new HashMap<K,V>(); }\n    public static int i(String s) { return Integer.parseInt(s); }\n    public static long l(String s) { return Long.parseLong(s); }\n}\n",
    "origin_report": "{\"fileName\":\"NESTED_PARENS_orig.java\",\"violations\":[{\"description\":\"The utility class name 'NESTED_PARENS_orig' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"A method/constructor should not explicitly throw java.lang.Exception\",\"rule\":\"SignatureDeclareThrowsException\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like in\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Ensure that resources like this Scanner object are closed after use\",\"rule\":\"CloseResource\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Local variable 'in' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'parens' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Usage of System.out/err\",\"rule\":\"SystemPrintln\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"Usage of System.out/err\",\"rule\":\"SystemPrintln\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new HashMap<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using short method names\",\"rule\":\"ShortMethodName\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like s\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 's' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using short method names\",\"rule\":\"ShortMethodName\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like s\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 's' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":18}",
    "origin_num_problem": 18,
    "new_code": "package java_programs.extra;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic class NestedParens {\n    public static void main(String[] args) throws Exception {\n        Scanner in = new Scanner(System.in);\n        CAS: while(in.hasNext()) {\n            String parens = in.next();\n            int depth = 0;\n            for(int i=0; i < parens.length(); i++) {\n                if(parens.charAt(i) == '(') {\n                    depth++;\n                } else {\n                    depth--;\n                    if(depth < 0) {\n                        System.out.println(\"0\");\n                        continue CAS;\n                    }\n                }\n            }\n            System.out.println(depth == 0 ? \"1\" : \"0\");\n        }\n    }\n\n    public static <T> List<T> list() { return new ArrayList<>(); }\n    public static <K,V> Map<K,V> map() { return new HashMap<>(); }\n    public static int i(String s) { return Integer.parseInt(s); }\n    public static long l(String s) { return Long.parseLong(s); }\n}",
    "new_report": "{\"fileName\":\"NESTED_PARENS_orig.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"A method/constructor should not explicitly throw java.lang.Exception\",\"rule\":\"SignatureDeclareThrowsException\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like in\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Ensure that resources like this Scanner object are closed after use\",\"rule\":\"CloseResource\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Local variable 'in' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'parens' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Usage of System.out/err\",\"rule\":\"SystemPrintln\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"Usage of System.out/err\",\"rule\":\"SystemPrintln\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"Avoid using short method names\",\"rule\":\"ShortMethodName\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like s\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 's' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using short method names\",\"rule\":\"ShortMethodName\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like s\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 's' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":15}",
    "new_num_problem": 15,
    "is_same": 1,
    "description": "代码保留了之前记住的功能，仅对包名和类名进行了更改，并进行了一些代码风格上的改动，但逻辑和功能保持不变。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:31"
  },
  {
    "id": 28,
    "file_name": "NEXT_PALINDROME.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\nimport java.lang.Math.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class NEXT_PALINDROME {\n    public static String next_palindrome(int[] digit_list) {\n        int high_mid = Math.floorDiv(digit_list.length, 2);\n        int low_mid = Math.floorDiv(digit_list.length - 1, 2);\n\n        while (high_mid < digit_list.length && low_mid >= 0) {\n            if (digit_list[high_mid] == 9) {\n                digit_list[high_mid] = 0;\n                digit_list[low_mid] = 0;\n                high_mid += 1;\n                low_mid -= 1;\n            } else {\n                digit_list[high_mid] += 1;\n                if (low_mid != high_mid) {\n                    digit_list[low_mid] += 1;\n                }\n                return Arrays.toString(digit_list);\n            }\n        }\n\n        ArrayList<Integer> otherwise = new ArrayList<Integer>();\n        otherwise.add(1);\n        otherwise.addAll(Collections.nCopies(digit_list.length, 0));\n        otherwise.add(1);\n\n        return String.valueOf(otherwise);\n    }\n}\n",
    "origin_report": "{\"fileName\":\"NEXT_PALINDROME.java\",\"violations\":[{\"description\":\"The utility class name 'NEXT_PALINDROME' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'next_palindrome' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Parameter 'digit_list' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'digit_list' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"The local variable name 'high_mid' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"The local variable name 'low_mid' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'otherwise' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":13}",
    "origin_num_problem": 13,
    "new_code": "package java_programs;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\n\npublic class NextPalindrome {\n    public static String findNextPalindrome(int[] digitList) {\n        int highMid = digitList.length / 2;\n        int lowMid = (digitList.length - 1) / 2;\n\n        while (highMid < digitList.length && lowMid >= 0) {\n            if (digitList[highMid] == 9) {\n                digitList[highMid] = 0;\n                digitList[lowMid] = 0;\n                highMid++;\n                lowMid--;\n            } else {\n                digitList[highMid]++;\n                if (lowMid != highMid) {\n                    digitList[lowMid]++;\n                }\n                return Arrays.toString(digitList);\n            }\n        }\n\n        ArrayList<Integer> newPalindrome = new ArrayList<>();\n        newPalindrome.add(1);\n        newPalindrome.addAll(Collections.nCopies(digitList.length, 0));\n        newPalindrome.add(1);\n\n        return newPalindrome.toString();\n    }\n}",
    "new_report": "{\"fileName\":\"NEXT_PALINDROME.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Consider using varargs for methods or constructors which take an array the last parameter.\",\"rule\":\"UseVarargs\",\"ruleSet\":\"Best Practices\",\"priority\":4},{\"description\":\"Parameter 'digitList' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using literals in if statements\",\"rule\":\"AvoidLiteralsInIfCondition\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'newPalindrome' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":7}",
    "new_num_problem": 7,
    "is_same": 1,
    "description": "代码保留了之前的功能，仅进行了格式调整和变量命名的修改",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:32"
  },
  {
    "id": 29,
    "file_name": "NEXT_PERMUTATION.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n//import com.google.guava.Lists;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class NEXT_PERMUTATION {\n    public static ArrayList<Integer> next_permutation(ArrayList<Integer> perm) {\n        for (int i=perm.size()-2; i!=-1; i--) {\n            if (perm.get(i) < perm.get(i+1)) {\n                for (int j=perm.size()-1; j!=i; j--) {\n                    if (perm.get(j) < perm.get(i)) {\n                        ArrayList<Integer> next_perm = perm;\n                        int temp_j = perm.get(j);\n                        int temp_i = perm.get(i);\n                        next_perm.set(i,temp_j);\n                        next_perm.set(j,temp_i);\n\n                        ArrayList<Integer> reversed = new ArrayList<Integer>(100);\n                        for (int k=next_perm.size()-1; k!=i; k--) {\n                            reversed.add(next_perm.get(k));\n                        }\n\n                        int q = i + 1;\n                        for (Integer replace : reversed) {\n                            next_perm.set(q, replace);\n                            q++;\n                        }\n\n                        return next_perm;\n                    }\n                }\n            }\n        }\n\n        return new ArrayList<Integer>();\n    }\n}\n",
    "origin_report": "{\"fileName\":\"NEXT_PERMUTATION.java\",\"violations\":[{\"description\":\"The utility class name 'NEXT_PERMUTATION' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"The method 'next_permutation(ArrayList<Integer>)' has a cognitive complexity of 20, current threshold is 15\",\"rule\":\"CognitiveComplexity\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'next_permutation' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'perm' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'next_perm' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'next_perm' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'temp_j' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'temp_j' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'temp_i' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'temp_i' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'reversed' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like q\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'replace' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":22}",
    "origin_num_problem": 22,
    "new_code": "public class NextPermutation {\n    public static ArrayList<Integer> nextPermutation(ArrayList<Integer> perm) {\n        for (int i = perm.size() - 2; i >= 0; i--) {\n            if (perm.get(i) < perm.get(i + 1)) {\n                for (int j = perm.size() - 1; j != i; j--) {\n                    if (perm.get(j) < perm.get(i)) {\n                        ArrayList<Integer> nextPerm = new ArrayList<>(perm);\n                        int tempJ = perm.get(j);\n                        int tempI = perm.get(i);\n                        nextPerm.set(i, tempJ);\n                        nextPerm.set(j, tempI);\n\n                        ArrayList<Integer> reversed = new ArrayList<>();\n                        for (int k = nextPerm.size() - 1; k != i; k--) {\n                            reversed.add(nextPerm.get(k));\n                        }\n\n                        int q = i + 1;\n                        for (Integer replace : reversed) {\n                            nextPerm.set(q, replace);\n                            q++;\n                        }\n\n                        return nextPerm;\n                    }\n                }\n            }\n        }\n\n        return new ArrayList<>();\n    }\n}",
    "new_report": "{\"fileName\":\"NEXT_PERMUTATION.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The method 'nextPermutation(ArrayList<Integer>)' has a cognitive complexity of 20, current threshold is 15\",\"rule\":\"CognitiveComplexity\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'perm' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'nextPerm' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Local variable 'tempJ' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'tempI' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'reversed' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Avoid variables with short names like q\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'replace' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":13}",
    "new_num_problem": 13,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仍然实现了对给定排列的下一个排列进行计算。只是将类名和方法名改为了符合命名规范的形式，并对部分变量名和容器初始化进行了调整。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:35"
  },
  {
    "id": 30,
    "file_name": "Node.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\npublic class Node {\n\n    private String value;\n    private ArrayList<Node> successors;\n    private ArrayList<Node> predecessors;\n    private Node successor;\n\n    public Node() {\n        this.successor = null;\n        this.successors = new ArrayList<Node>();\n        this.predecessors = new ArrayList<Node>();\n        this.value = null;\n    }\n\n    public Node(String value) {\n        this.value = value;\n        this.successor = null;\n        this.successors = new ArrayList<>();\n        this.predecessors = new ArrayList<>();\n    }\n\n    public Node(String value, Node successor) {\n        this.value = value;\n        this.successor = successor;\n    }\n\n    public Node(String value, ArrayList<Node> successors) {\n        this.value = value;\n        this.successors = successors;\n    }\n\n    public Node(String value, ArrayList<Node> predecessors, ArrayList<Node> successors) {\n        this.value = value;\n        this.predecessors = predecessors;\n        this.successors = successors;\n    }\n\n    public String getValue() {\n        return value;\n    }\n\n    public void setSuccessor(Node successor) {\n        this.successor = successor;\n    }\n\n    public void setSuccessors(ArrayList<Node> successors) {\n        this.successors = successors;\n    }\n\n    public void setPredecessors(ArrayList<Node> predecessors) {\n        this.predecessors = predecessors;\n    }\n\n    public Node getSuccessor() {\n        return successor;\n    }\n\n    public ArrayList<Node> getSuccessors() {\n        return successors;\n    }\n    public ArrayList<Node> getPredecessors() {\n        return predecessors;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"Node.java\",\"violations\":[{\"description\":\"Avoid short class names like Node\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"The class 'Node' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=7, WMC=12)\",\"rule\":\"DataClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Field 'value' may be declared final\",\"rule\":\"ImmutableField\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Assigning an Object to null is a code smell.  Consider refactoring.\",\"rule\":\"NullAssignment\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Assigning an Object to null is a code smell.  Consider refactoring.\",\"rule\":\"NullAssignment\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Parameter 'value' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Assigning an Object to null is a code smell.  Consider refactoring.\",\"rule\":\"NullAssignment\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Parameter 'value' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'successor' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'value' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'successors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'value' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'predecessors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'successors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'successor' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'successors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'predecessors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3}],\"total\":28}",
    "origin_num_problem": 28,
    "new_code": "package java_programs;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Node {\n\n    private String value;\n    private List<Node> successors;\n    private List<Node> predecessors;\n    private Node successor;\n\n    public Node() {\n        this.successor = null;\n        this.successors = new ArrayList<>();\n        this.predecessors = new ArrayList<>();\n        this.value = null;\n    }\n\n    public Node(String value) {\n        this.value = value;\n        this.successor = null;\n        this.successors = new ArrayList<>();\n        this.predecessors = new ArrayList<>();\n    }\n\n    public Node(String value, Node successor) {\n        this.value = value;\n        this.successor = successor;\n    }\n\n    public Node(String value, List<Node> successors) {\n        this.value = value;\n        this.successors = successors;\n    }\n\n    public Node(String value, List<Node> predecessors, List<Node> successors) {\n        this.value = value;\n        this.predecessors = predecessors;\n        this.successors = successors;\n    }\n\n    public String getValue() {\n        return value;\n    }\n\n    public void setSuccessor(Node successor) {\n        this.successor = successor;\n    }\n\n    public void setSuccessors(List<Node> successors) {\n        this.successors = successors;\n    }\n\n    public void setPredecessors(List<Node> predecessors) {\n        this.predecessors = predecessors;\n    }\n\n    public Node getSuccessor() {\n        return successor;\n    }\n\n    public List<Node> getSuccessors() {\n        return successors;\n    }\n\n    public List<Node> getPredecessors() {\n        return predecessors;\n    }\n}",
    "new_report": "{\"fileName\":\"Node.java\",\"violations\":[{\"description\":\"Avoid short class names like Node\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"The class 'Node' is suspected to be a Data Class (WOC=0.000%, NOPA=0, NOAM=7, WMC=12)\",\"rule\":\"DataClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Field 'value' may be declared final\",\"rule\":\"ImmutableField\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Assigning an Object to null is a code smell.  Consider refactoring.\",\"rule\":\"NullAssignment\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Assigning an Object to null is a code smell.  Consider refactoring.\",\"rule\":\"NullAssignment\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Parameter 'value' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Assigning an Object to null is a code smell.  Consider refactoring.\",\"rule\":\"NullAssignment\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Parameter 'value' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'successor' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'value' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'successors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'value' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'predecessors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'successors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'successor' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'successors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'predecessors' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":17}",
    "new_num_problem": 17,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，并对代码进行了优化和改进，主要是将ArrayList替换为更通用的List接口，更好地符合面向接口编程的原则。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:37"
  },
  {
    "id": 31,
    "file_name": "PASCAL.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class PASCAL {\n    public static ArrayList<ArrayList<Integer>> pascal(int n) {\n        ArrayList<ArrayList<Integer>> rows = new ArrayList<ArrayList<Integer>>();\n        ArrayList<Integer> init = new ArrayList<Integer>();\n        init.add(1);\n        rows.add(init);\n\n        for (int r=1; r<n; r++) {\n            ArrayList<Integer> row = new ArrayList<Integer>();\n            for (int c=0; c<r; c++) {\n                int upleft, upright;\n                if (c > 0) {\n                    upleft = rows.get(r-1).get(c-1);\n                } else {\n                    upleft = 0;\n                }\n                if (c < r) {\n                    upright = rows.get(r-1).get(c);\n                } else {\n                    upright = 0;\n                }\n                row.add(upleft+upright);\n            }\n            rows.add(row);\n        }\n\n        return rows;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"PASCAL.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'n' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'rows' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'init' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'row' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Use one line for each declaration, it enhances code readability.\",\"rule\":\"OneDeclarationPerLine\",\"ruleSet\":\"Best Practices\",\"priority\":4}],\"total\":18}",
    "origin_num_problem": 18,
    "new_code": "package java_programs;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PASCAL {\n    public static List<List<Integer>> pascal(int n) {\n        List<List<Integer>> rows = new ArrayList<>();\n        List<Integer> init = new ArrayList<>();\n        init.add(1);\n        rows.add(init);\n\n        for (int r = 1; r < n; r++) {\n            List<Integer> row = new ArrayList<>();\n            for (int c = 0; c < r; c++) {\n                int upleft, upright;\n                if (c > 0) {\n                    upleft = rows.get(r - 1).get(c - 1);\n                } else {\n                    upleft = 0;\n                }\n                if (c < r) {\n                    upright = rows.get(r - 1).get(c);\n                } else {\n                    upright = 0;\n                }\n                row.add(upleft + upright);\n            }\n            rows.add(row);\n        }\n\n        return rows;\n    }\n}",
    "new_report": "{\"fileName\":\"PASCAL.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'n' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'rows' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'init' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'row' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Use one line for each declaration, it enhances code readability.\",\"rule\":\"OneDeclarationPerLine\",\"ruleSet\":\"Best Practices\",\"priority\":4}],\"total\":8}",
    "new_num_problem": 8,
    "is_same": 1,
    "description": "代码保留了之前的功能，只是对部分变量和类名进行了重构，没有改变原有逻辑",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:39"
  },
  {
    "id": 32,
    "file_name": "POSSIBLE_CHANGE.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class POSSIBLE_CHANGE {\n    public static int possible_change(int[] coins, int total) {\n        if (total == 0) {\n            return 1;\n        }\n        if (total < 0) {\n            return 0;\n        }\n\n        int first = coins[0];\n        int[] rest = Arrays.copyOfRange(coins, 1, coins.length);\n        return possible_change(coins, total-first) + possible_change(rest, total);\n    }\n}\n",
    "origin_report": "{\"fileName\":\"POSSIBLE_CHANGE.java\",\"violations\":[{\"description\":\"The utility class name 'POSSIBLE_CHANGE' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'possible_change' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'coins' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'total' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'first' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'rest' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "origin_num_problem": 9,
    "new_code": "public class CoinChange {\n    public static int coinChangePossibilities(final int[] coins, final int total) {\n        if (total == 0) {\n            return 1;\n        }\n        if (total < 0) {\n            return 0;\n        }\n\n        int firstCoin = coins[0];\n        int[] remainingCoins = Arrays.copyOfRange(coins, 1, coins.length);\n        return coinChangePossibilities(coins, total - firstCoin) + coinChangePossibilities(remainingCoins, total);\n    }\n}",
    "new_report": "{\"fileName\":\"POSSIBLE_CHANGE.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'firstCoin' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'remainingCoins' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":6}",
    "new_num_problem": 6,
    "is_same": 1,
    "description": "重构后的代码保留了原始代码的功能，仅对类名和变量名进行了修改，逻辑没有改变。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:41"
  },
  {
    "id": 33,
    "file_name": "POWERSET.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class POWERSET {\n    public static ArrayList<ArrayList> powerset(ArrayList arr) {\n        if (!arr.isEmpty()) {\n            Object first = arr.get(0);\n            arr.remove(0);\n            ArrayList rest = arr;\n            ArrayList<ArrayList> rest_subsets = powerset(rest);\n\n            ArrayList<ArrayList> output = new ArrayList<ArrayList>(100);\n            ArrayList to_add = new ArrayList(100);\n            to_add.add(first);\n            for (ArrayList subset : rest_subsets) {\n                to_add.addAll(subset);\n            }\n            output.add(to_add);\n\n            return output;\n        } else {\n            ArrayList empty_set = new ArrayList<ArrayList>();\n            empty_set.add(new ArrayList());\n            return empty_set;\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"POWERSET.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid if (x != y) ..; else ..;\",\"rule\":\"ConfusingTernary\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'first' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'rest' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'rest_subsets' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'rest_subsets' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'output' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'to_add' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'to_add' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Raw type use may be avoided by using a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'subset' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'empty_set' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'empty_set' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Raw type use may be avoided by using a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":31}",
    "origin_num_problem": 31,
    "new_code": "import java.util.*;\n\npublic class PowerSet {\n    public static List<List<Object>> powerset(final List<Object> arr) {\n        if (!arr.isEmpty()) {\n            Object first = arr.get(0);\n            arr.remove(0);\n            List<Object> rest = new ArrayList<>(arr);\n            List<List<Object>> rest_subsets = powerset(rest);\n\n            List<List<Object>> output = new ArrayList<>();\n            List<Object> to_add = new ArrayList<>();\n            to_add.add(first);\n            for (List<Object> subset : rest_subsets) {\n                to_add.addAll(subset);\n            }\n            output.add(to_add);\n\n            return output;\n        } else {\n            List<List<Object>> empty_set = new ArrayList<>();\n            empty_set.add(new ArrayList<>());\n            return empty_set;\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"POWERSET.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid if (x != y) ..; else ..;\",\"rule\":\"ConfusingTernary\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'first' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'rest' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'rest_subsets' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'rest_subsets' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'output' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'to_add' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'to_add' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'subset' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'empty_set' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'empty_set' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1}],\"total\":14}",
    "new_num_problem": 14,
    "is_same": 1,
    "description": "重构后的代码保留了之前记住的代码的功能，仍然是计算给定集合的幂集。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:43"
  },
  {
    "id": 34,
    "file_name": "QC_LEVENSHTEIN.java",
    "language_type": "java",
    "origin_code": "//Corrected package name from quixey to java_programs.extra;\n//package quixey;\npackage java_programs.extra;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class QC_LEVENSHTEIN {\n    public static int levenshtein(String source, String target) {\n        if (source.equals(\"\")) {\n            return target.length();\n        } else if (target.equals(\"\")) {\n            return source.length();\n        } else if (source.charAt(0) == target.charAt(0)) {\n            return 1 + levenshtein(source.substring(1), target.substring(1));\n        } else {\n            return 1 + Math.min(\n                levenshtein(source,              target.substring(1)),\n                    Math.min(\n                levenshtein(source.substring(1), target.substring(1)),\n                levenshtein(source.substring(1), target)\n                    )\n            );\n        }\n    }\n}\n",
    "origin_report": "{\"fileName\":\"QC_LEVENSHTEIN.java\",\"violations\":[{\"description\":\"The utility class name 'QC_LEVENSHTEIN' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'source' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'target' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Position literals first in String comparisons\",\"rule\":\"LiteralsFirstInComparisons\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Position literals first in String comparisons\",\"rule\":\"LiteralsFirstInComparisons\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "origin_num_problem": 9,
    "new_code": "public class LevenshteinDistanceCalculator {\n    public static int calculateLevenshteinDistance(final String source, final String target) {\n        if (source.isEmpty()) {\n            return target.length();\n        } else if (target.isEmpty()) {\n            return source.length();\n        } else if (source.charAt(0) == target.charAt(0)) {\n            return 1 + calculateLevenshteinDistance(source.substring(1), target.substring(1));\n        } else {\n            return 1 + Math.min(\n                calculateLevenshteinDistance(source, target.substring(1)),\n                Math.min(\n                    calculateLevenshteinDistance(source.substring(1), target.substring(1)),\n                    calculateLevenshteinDistance(source.substring(1), target)\n                )\n            );\n        }\n    }\n}",
    "new_report": "{\"fileName\":\"QC_LEVENSHTEIN.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "new_num_problem": 5,
    "is_same": 1,
    "description": "代码重构后保留了之前记住的代码功能，只是进行了一些简单的命名和格式调整，功能逻辑没有改变。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:45"
  },
  {
    "id": 35,
    "file_name": "QUICKSORT.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class QUICKSORT {\n    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<Integer>();\n        }\n\n        Integer pivot = arr.get(0);\n        ArrayList<Integer> lesser = new ArrayList<Integer>();\n        ArrayList<Integer> greater = new ArrayList<Integer>();\n\n        for (Integer x : arr.subList(1, arr.size())) {\n            if (x < pivot) {\n                lesser.add(x);\n            } else if (x > pivot) {\n                greater.add(x);\n            }\n        }\n        ArrayList<Integer> middle = new ArrayList<Integer>();\n        middle.add(pivot);\n        lesser = quicksort(lesser);\n        greater = quicksort(greater);\n        middle.addAll(greater);\n        lesser.addAll(middle);\n        return lesser;\n\n    }\n}\n",
    "origin_report": "{\"fileName\":\"QUICKSORT.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'pivot' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'x' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'middle' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":15}",
    "origin_num_problem": 15,
    "new_code": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class QuickSort {\n    public static List<Integer> quicksort(final List<Integer> arr) {\n        if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n\n        Integer pivot = arr.get(0);\n        List<Integer> lesser = new ArrayList<>();\n        List<Integer> greater = new ArrayList<>();\n\n        for (Integer x : arr.subList(1, arr.size())) {\n            if (x < pivot) {\n                lesser.add(x);\n            } else if (x > pivot) {\n                greater.add(x);\n            }\n        }\n        List<Integer> middle = new ArrayList<>();\n        middle.add(pivot);\n        lesser = quicksort(lesser);\n        greater = quicksort(greater);\n        middle.addAll(greater);\n        lesser.addAll(middle);\n        return lesser;\n\n    }\n}",
    "new_report": "{\"fileName\":\"QUICKSORT.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'pivot' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'x' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'middle' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":6}",
    "new_num_problem": 6,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仍然是实现快速排序算法",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:46"
  },
  {
    "id": 36,
    "file_name": "REVERSE_LINKED_LIST.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class REVERSE_LINKED_LIST {\n    public static Node reverse_linked_list(Node node) {\n        Node prevnode = null;\n        Node nextnode;\n        while (node != null) {\n            nextnode = node.getSuccessor();\n            node.setSuccessor(prevnode);\n            node = nextnode;\n        }\n        return prevnode;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"REVERSE_LINKED_LIST.java\",\"violations\":[{\"description\":\"The utility class name 'REVERSE_LINKED_LIST' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'reverse_linked_list' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'prevnode' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid reassigning parameters such as 'node'\",\"rule\":\"AvoidReassigningParameters\",\"ruleSet\":\"Best Practices\",\"priority\":2}],\"total\":5}",
    "origin_num_problem": 5,
    "new_code": "public class LinkedListUtils {\n    public static Node reverseLinkedList(Node inputNode) {\n        Node reversedNode = null;\n        Node nextNode;\n        while (inputNode != null) {\n            nextNode = inputNode.getSuccessor();\n            inputNode.setSuccessor(reversedNode);\n            reversedNode = inputNode;\n            inputNode = nextNode;\n        }\n        return reversedNode;\n    }\n}",
    "new_report": "{\"fileName\":\"REVERSE_LINKED_LIST.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid reassigning parameters such as 'inputNode'\",\"rule\":\"AvoidReassigningParameters\",\"ruleSet\":\"Best Practices\",\"priority\":2}],\"total\":3}",
    "new_num_problem": 3,
    "is_same": 1,
    "description": "代码重构后保留了原有代码的功能，仍然是反转链表的功能，只是将类名和方法名进行了修改",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:48"
  },
  {
    "id": 37,
    "file_name": "RPN_EVAL.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\nimport java.util.function.BinaryOperator;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class RPN_EVAL {\n    public static Double rpn_eval(ArrayList tokens) {\n        Map<String, BinaryOperator<Double>> op = new HashMap<String, BinaryOperator<Double>>();\n        op.put(\"+\", (a, b) -> a + b);\n        op.put(\"-\", (a, b) -> a - b);\n        op.put(\"*\", (a, b) -> a * b);\n        op.put(\"/\", (a, b) -> a / b);\n\n\n        Stack stack = new Stack();\n\n        for (Object token : tokens) {\n            if (Double.class.isInstance(token)) {\n                stack.push((Double) token);\n            } else {\n                token = (String) token;\n                Double a = (Double) stack.pop();\n                Double b = (Double) stack.pop();\n                Double c = 0.0;\n                BinaryOperator<Double> bin_op = op.get(token);\n                c = bin_op.apply(a,b);\n                stack.push(c);\n            }\n        }\n\n        return (Double) stack.pop();\n    }\n}\n",
    "origin_report": "{\"fileName\":\"RPN_EVAL.java\",\"violations\":[{\"description\":\"The utility class name 'RPN_EVAL' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'rpn_eval' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'tokens' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like op\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'op' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new HashMap<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'Stack'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Consider replacing this Vector with the newer java.util.List\",\"rule\":\"ReplaceVectorWithList\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'stack' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Consider replacing this Vector with the newer java.util.List\",\"rule\":\"ReplaceVectorWithList\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Raw type use may be avoided by using a diamond: `new Stack<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid reassigning the loop control variable 'token'\",\"rule\":\"AvoidReassigningLoopVariables\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid variables with short names like a\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'a' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like b\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'b' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like c\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The initializer for variable 'c' is never used (overwritten on line 34)\",\"rule\":\"UnusedAssignment\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'bin_op' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'bin_op' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1}],\"total\":23}",
    "origin_num_problem": 23,
    "new_code": "public class RpnEvaluator {\n    public static Double evaluateRpn(final ArrayList<Object> tokens) {\n        final Map<String, BinaryOperator<Double>> operators = new HashMap<>();\n        operators.put(\"+\", (a, b) -> a + b);\n        operators.put(\"-\", (a, b) -> a - b);\n        operators.put(\"*\", (a, b) -> a * b);\n        operators.put(\"/\", (a, b) -> a / b);\n\n        final Stack<Double> stack = new Stack<>();\n\n        for (final Object token : tokens) {\n            if (token instanceof Double) {\n                stack.push((Double) token);\n            } else {\n                final String operator = (String) token;\n                final Double operand1 = stack.pop();\n                final Double operand2 = stack.pop();\n                final BinaryOperator<Double> binaryOperator = operators.get(operator);\n                final Double result = binaryOperator.apply(operand2, operand1);\n                stack.push(result);\n            }\n        }\n\n        return stack.pop();\n    }\n}",
    "new_report": "{\"fileName\":\"RPN_EVAL.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3}],\"total\":2}",
    "new_num_problem": 2,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仅对类名和方法名进行了更改，并添加了类型参数和final修饰符，但逻辑和功能保持不变。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:50"
  },
  {
    "id": 38,
    "file_name": "SHORTEST_PATHS.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\nimport java.lang.Math.*;\n\n/**\n *\n * @author Angela Chen\n */\npublic class SHORTEST_PATHS {\n\n    // Define Infinite as a large enough value. This value will be used\n    // for vertices not connected to each other\n    final static int INF = 99999;\n\n\n    public static Map<String, Integer> shortest_paths(String source, Map<List<String>,Integer> weight_by_edge) {\n        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n        for (List<String> edge : weight_by_edge.keySet()) {\n                weight_by_node.put(edge.get(1), INF);\n                weight_by_node.put(edge.get(0), INF);\n        }\n\n        weight_by_node.put(source, 0);\n        for (int i = 0; i < weight_by_node.size(); i++) {\n            for (List<String> edge : weight_by_edge.keySet()) {\n                int update_weight = Math.min(\n                        weight_by_node.get(edge.get(0))\n                                + weight_by_edge.get(edge),\n                        weight_by_node.get(edge.get(1)));\n                weight_by_edge.put(edge, update_weight);\n            }\n        }\n        return weight_by_node;\n    }\n\n\n    /**\n     * Rewrite shortest_paths method\n     * @param node\n     * @param weight_by_edge\n     * @return\n     */\n\n    public static Map<String, Integer> shortest_paths(Node source, List<WeightedEdge> weight_by_edge) {\n        Map<String,Integer> weight_by_node = new HashMap<String,Integer>();\n        for (WeightedEdge edge : weight_by_edge) {\n                weight_by_node.put(edge.node1.toString(), INF);\n                weight_by_node.put(edge.node2.toString(), INF);\n        }\n\n        weight_by_node.put(source.getValue(), 0);\n        for (int i = 0; i < weight_by_node.size(); i++) {\n            for (WeightedEdge edge : weight_by_edge) {\n                int update_weight = Math.min(\n                        weight_by_node.get(edge.node1.toString())\n                                + edge.weight,\n                        weight_by_node.get(edge.node2.toString()));\n                edge.weight = update_weight;\n            }\n        }\n        return weight_by_node;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"SHORTEST_PATHS.java\",\"violations\":[{\"description\":\"The utility class name 'SHORTEST_PATHS' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Missing commented default access modifier on field 'INF'\",\"rule\":\"CommentDefaultAccessModifier\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Number 99999 should separate every third digit with an underscore\",\"rule\":\"UseUnderscoresInNumericLiterals\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The static method name 'shortest_paths' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'source' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'weight_by_edge' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'weight_by_edge' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'weight_by_node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'weight_by_node' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new HashMap<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'update_weight' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'update_weight' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"The static method name 'shortest_paths' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'source' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'weight_by_edge' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'weight_by_edge' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'weight_by_node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'weight_by_node' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new HashMap<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Access to field `node1` on foreign value `edge` (degree 1)\",\"rule\":\"LawOfDemeter\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Access to field `node2` on foreign value `edge` (degree 1)\",\"rule\":\"LawOfDemeter\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'update_weight' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'update_weight' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Access to field `node1` on foreign value `edge` (degree 1)\",\"rule\":\"LawOfDemeter\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Access to field `weight` on foreign value `edge` (degree 1)\",\"rule\":\"LawOfDemeter\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Access to field `node2` on foreign value `edge` (degree 1)\",\"rule\":\"LawOfDemeter\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Access to field `weight` on foreign value `edge` (degree 1)\",\"rule\":\"LawOfDemeter\",\"ruleSet\":\"Design\",\"priority\":3}],\"total\":34}",
    "origin_num_problem": 34,
    "new_code": "package java_programs;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ShortestPaths {\n\n    final static int INF = 99999;\n\n    public static Map<String, Integer> shortestPaths(Node source, List<WeightedEdge> weightByEdge) {\n        Map<String, Integer> weightByNode = new HashMap<>();\n        for (WeightedEdge edge : weightByEdge) {\n            weightByNode.put(edge.getNode1().toString(), INF);\n            weightByNode.put(edge.getNode2().toString(), INF);\n        }\n\n        weightByNode.put(source.getValue(), 0);\n        for (int i = 0; i < weightByEdge.size(); i++) {\n            for (WeightedEdge edge : weightByEdge) {\n                int updateWeight = Math.min(\n                        weightByNode.get(edge.getNode1().toString()) + edge.getWeight(),\n                        weightByNode.get(edge.getNode2().toString())\n                );\n                weightByNode.put(edge.getNode2().toString(), updateWeight);\n            }\n        }\n        return weightByNode;\n    }\n}",
    "new_report": "{\"fileName\":\"SHORTEST_PATHS.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Missing commented default access modifier on field 'INF'\",\"rule\":\"CommentDefaultAccessModifier\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Number 99999 should separate every third digit with an underscore\",\"rule\":\"UseUnderscoresInNumericLiterals\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'source' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'weightByEdge' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'weightByNode' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This for loop can be replaced by a foreach loop\",\"rule\":\"ForLoopCanBeForeach\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'updateWeight' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":11}",
    "new_num_problem": 11,
    "is_same": 1,
    "description": "重构后的代码保留了之前代码的功能，仅进行了命名和代码风格的调整，功能逻辑保持不变",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:52"
  },
  {
    "id": 39,
    "file_name": "SHORTEST_PATH_LENGTH.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/**\n *\n * @author Angela Chen\n */\n\npublic class SHORTEST_PATH_LENGTH {\n    public static int shortest_path_length(Map<List<Node>, Integer> length_by_edge, Node startnode, Node goalnode) {\n        int n = length_by_edge.size();\n        // the shortest distance from source to each node\n        Map<Node, Integer> unvisitedNodes = new HashMap<>();\n        Set<Node> visitedNodes = new HashSet<>();\n\n        unvisitedNodes.put(startnode, 0);\n\n        while (!unvisitedNodes.isEmpty()) {\n            Node node = getNodeWithMinDistance(unvisitedNodes);\n            int distance = unvisitedNodes.get(node);\n            unvisitedNodes.remove(node);\n\n            if (node.getValue() == goalnode.getValue()) {\n                return distance;\n            }\n            visitedNodes.add(node);\n\n            for (Node nextnode : node.getSuccessors()) {\n                if (visitedNodes.contains(nextnode)) {\n                    continue;\n                }\n\n                if (unvisitedNodes.get(nextnode) == null) {\n                    unvisitedNodes.put(nextnode, Integer.MAX_VALUE);\n                }\n\n                unvisitedNodes.put(nextnode, Math.min(unvisitedNodes.get(nextnode),\n                        unvisitedNodes.get(nextnode) + length_by_edge.get(Arrays.asList(node, nextnode))));\n            }\n        }\n\n        return Integer.MAX_VALUE;\n    }\n\n    public static Node getNodeWithMinDistance(Map<Node,Integer> list) {\n        Node minNode = null;\n        int minDistance = Integer.MAX_VALUE;\n        for (Node node : list.keySet()) {\n            int distance = list.get(node);\n            if (distance < minDistance) {\n                minDistance = distance;\n                minNode = node;\n            }\n        }\n        return minNode;\n    }\n}",
    "origin_report": "{\"fileName\":\"SHORTEST_PATH_LENGTH.java\",\"violations\":[{\"description\":\"The utility class name 'SHORTEST_PATH_LENGTH' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'shortest_path_length' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'length_by_edge' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'length_by_edge' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'startnode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'goalnode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid unused local variables such as 'n'.\",\"rule\":\"UnusedLocalVariable\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'unvisitedNodes' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'visitedNodes' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'distance' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'nextnode' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'list' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'distance' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":19}",
    "origin_num_problem": 19,
    "new_code": "public class ShortestPathLengthUtil {\n    public static int shortestPathLength(final Map<List<Node>, Integer> lengthByEdge, final Node startNode, final Node goalNode) {\n        int n = lengthByEdge.size();\n        \n        final Map<Node, Integer> unvisitedNodes = new HashMap<>();\n        final Set<Node> visitedNodes = new HashSet<>();\n\n        unvisitedNodes.put(startNode, 0);\n\n        while (!unvisitedNodes.isEmpty()) {\n            final Node node = getNodeWithMinDistance(unvisitedNodes);\n            final int distance = unvisitedNodes.get(node);\n            unvisitedNodes.remove(node);\n\n            if (node.getValue() == goalNode.getValue()) {\n                return distance;\n            }\n            visitedNodes.add(node);\n\n            for (Node nextNode : node.getSuccessors()) {\n                if (visitedNodes.contains(nextNode)) {\n                    continue;\n                }\n\n                if (unvisitedNodes.get(nextNode) == null) {\n                    unvisitedNodes.put(nextNode, Integer.MAX_VALUE);\n                }\n\n                unvisitedNodes.put(nextNode, Math.min(unvisitedNodes.get(nextNode),\n                        distance + lengthByEdge.get(Arrays.asList(node, nextNode))));\n            }\n        }\n\n        return Integer.MAX_VALUE;\n    }\n\n    public static Node getNodeWithMinDistance(final Map<Node,Integer> list) {\n        Node minNode = null;\n        int minDistance = Integer.MAX_VALUE;\n        for (Node node : list.keySet()) {\n            final int distance = list.get(node);\n            if (distance < minDistance) {\n                minDistance = distance;\n                minNode = node;\n            }\n        }\n        return minNode;\n    }\n}",
    "new_report": "{\"fileName\":\"SHORTEST_PATH_LENGTH.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid unused local variables such as 'n'.\",\"rule\":\"UnusedLocalVariable\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'nextNode' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":7}",
    "new_num_problem": 7,
    "is_same": 1,
    "description": "重构后的代码保留了之前记住的代码的功能，仅对代码进行了格式调整和命名规范改进，没有改变功能或逻辑。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:54"
  },
  {
    "id": 40,
    "file_name": "SHORTEST_PATH_LENGTHS.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\nimport java.lang.Math.*;\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author Angela Chen\n */\npublic class SHORTEST_PATH_LENGTHS {\n    // Define Infinite as a large enough value. This value will be used\n    // for vertices not connected to each other\n    final static int INF = 99999;\n    public static Map<List<Integer>,Integer> shortest_path_lengths(int numNodes, Map<List<Integer>,Integer> length_by_edge) {\n        Map<List<Integer>,Integer> length_by_path = new HashMap<>();\n        for (int i = 0; i < numNodes; i++) {\n            for (int j =0; j < numNodes; j++) {\n                List<Integer> edge = new ArrayList<>(Arrays.asList(i,j));\n                if (i == j) {\n                    length_by_path.put(edge, 0);\n                }\n                else if (length_by_edge.containsKey(edge) ) {\n                    length_by_path.put(edge, length_by_edge.get(edge));\n                } else {\n                    length_by_path.put(edge, INF);\n                }\n            }\n        }\n        for (int k = 0; k < numNodes; k++) {\n            for (int i = 0; i < numNodes; i++) {\n                for (int j = 0; j < numNodes; j++) {\n                    int update_length = Math.min(length_by_path.get(Arrays.asList(i,j)),\n                                                 sumLengths(length_by_path.get(Arrays.asList(i,k)),\n                                                            length_by_path.get(Arrays.asList(j,k))));\n                    length_by_path.put(Arrays.asList(i,j), update_length);\n                }\n            }\n        }\n        return length_by_path;\n    }\n\n    static private int sumLengths(int a, int b) {\n        if(a == INF || b == INF) {\n            return INF;\n        }\n        return a + b;\n    }\n\n}\n",
    "origin_report": "{\"fileName\":\"SHORTEST_PATH_LENGTHS.java\",\"violations\":[{\"description\":\"The class name 'SHORTEST_PATH_LENGTHS' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Missing commented default access modifier on field 'INF'\",\"rule\":\"CommentDefaultAccessModifier\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Number 99999 should separate every third digit with an underscore\",\"rule\":\"UseUnderscoresInNumericLiterals\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The static method name 'shortest_path_lengths' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'numNodes' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'length_by_edge' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method parameter name 'length_by_edge' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"FormalParameterNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'length_by_path' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'length_by_path' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Local variable 'update_length' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'update_length' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid variables with short names like a\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'a' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like b\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'b' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":20}",
    "origin_num_problem": 20,
    "new_code": "public class ShortestPathLengthsUtil {\n\n    private static final int INF = 99999;\n\n    public static Map<List<Integer>, Integer> calculateShortestPathLengths(int numNodes, Map<List<Integer>, Integer> lengthByEdge) {\n        Map<List<Integer>, Integer> lengthByPath = new HashMap<>();\n\n        for (int i = 0; i < numNodes; i++) {\n            for (int j = 0; j < numNodes; j++) {\n                List<Integer> edge = new ArrayList<>(Arrays.asList(i, j));\n                if (i == j) {\n                    lengthByPath.put(edge, 0);\n                } else if (lengthByEdge.containsKey(edge)) {\n                    lengthByPath.put(edge, lengthByEdge.get(edge));\n                } else {\n                    lengthByPath.put(edge, INF);\n                }\n            }\n        }\n\n        for (int k = 0; k < numNodes; k++) {\n            for (int i = 0; i < numNodes; i++) {\n                for (int j = 0; j < numNodes; j++) {\n                    int updateLength = Math.min(lengthByPath.get(Arrays.asList(i, j)),\n                                                sumLengths(lengthByPath.get(Arrays.asList(i, k)),\n                                                           lengthByPath.get(Arrays.asList(k, j))));\n                    lengthByPath.put(Arrays.asList(i, j), updateLength);\n                }\n            }\n        }\n\n        return lengthByPath;\n    }\n\n    private static int sumLengths(int a, int b) {\n        if (a == INF || b == INF) {\n            return INF;\n        }\n        return a + b;\n    }\n\n}",
    "new_report": "{\"fileName\":\"SHORTEST_PATH_LENGTHS.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Number 99999 should separate every third digit with an underscore\",\"rule\":\"UseUnderscoresInNumericLiterals\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'numNodes' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'lengthByEdge' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'lengthByPath' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'edge' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Local variable 'updateLength' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like a\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'a' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like b\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'b' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":14}",
    "new_num_problem": 14,
    "is_same": 1,
    "description": "重构后的代码保留了原始代码的功能，只是进行了代码风格上的调整和重命名，没有改变算法逻辑",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:57"
  },
  {
    "id": 41,
    "file_name": "SHUNTING_YARD.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class SHUNTING_YARD {\n    public static List shunting_yard(ArrayList tokens) {\n        Map<String, Integer> precedence = new HashMap<String, Integer>();\n        precedence.put(\"+\",1);\n        precedence.put(\"-\",1);\n        precedence.put(\"*\",2);\n        precedence.put(\"/\",2);\n\n        ArrayList rpntokens = new ArrayList(100);\n        ArrayDeque opstack = new ArrayDeque();\n\n        for (Object token: tokens) {\n            if (Integer.class.isInstance(token)) {\n            // cover also Double case I guess?\n                rpntokens.add((Integer) token);\n            } else {\n                String operator = (String) token;\n                while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.getLast())) {\n                    rpntokens.add(opstack.pop());\n                }\n            }\n        }\n\n        while (!opstack.isEmpty()) {\n            rpntokens.add(opstack.pop());\n        }\n\n        return rpntokens;\n    }\n\n}\n",
    "origin_report": "{\"fileName\":\"SHUNTING_YARD.java\",\"violations\":[{\"description\":\"The utility class name 'SHUNTING_YARD' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'shunting_yard' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'tokens' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'precedence' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new HashMap<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'rpntokens' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Raw type use may be avoided by using a diamond: `new ArrayList<>(100)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayDeque'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'opstack' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Raw type use may be avoided by using a diamond: `new ArrayDeque<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'token' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'operator' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":16}",
    "origin_num_problem": 16,
    "new_code": "import java.util.*;\n\npublic class ShuntingYard {\n    public static List<Integer> shuntingYard(final List<Object> tokens) {\n        Map<String, Integer> precedence = new HashMap<>();\n        precedence.put(\"+\", 1);\n        precedence.put(\"-\", 1);\n        precedence.put(\"*\", 2);\n        precedence.put(\"/\", 2);\n\n        List<Integer> rpntokens = new ArrayList<>(100);\n        Deque<String> opstack = new ArrayDeque<>();\n\n        for (final Object token : tokens) {\n            if (token instanceof Integer) {\n                rpntokens.add((Integer) token);\n            } else {\n                String operator = (String) token;\n                while (!opstack.isEmpty() && precedence.get(operator) <= precedence.get(opstack.peekLast())) {\n                    rpntokens.add(Integer.parseInt(opstack.pop()));\n                }\n            }\n        }\n\n        while (!opstack.isEmpty()) {\n            rpntokens.add(Integer.parseInt(opstack.pop()));\n        }\n\n        return rpntokens;\n    }\n}",
    "new_report": "{\"fileName\":\"SHUNTING_YARD.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation\",\"rule\":\"UseConcurrentHashMap\",\"ruleSet\":\"Multithreading\",\"priority\":3},{\"description\":\"Local variable 'precedence' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'rpntokens' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'opstack' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'operator' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":7}",
    "new_num_problem": 7,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仍然是使用逆波兰表达式算法进行运算符优先级的转换和表达式计算。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:08:59"
  },
  {
    "id": 42,
    "file_name": "SIEVE.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class SIEVE {\n\n    public static boolean all(ArrayList<Boolean> arr) {\n        for (boolean value : arr) {\n            if (!value) { return false; }\n        }\n        return true;\n    }\n\n    public static boolean any(ArrayList<Boolean> arr) {\n        for (boolean value: arr) {\n            if (value) { return true; }\n        }\n        return false;\n    }\n\n    public static ArrayList<Boolean> list_comp(int n, ArrayList<Integer> primes) {\n        ArrayList<Boolean> built_comprehension = new ArrayList<Boolean>();\n        for (Integer p : primes) {\n            built_comprehension.add(n % p > 0);\n        }\n        return built_comprehension;\n    }\n\n\n    public static ArrayList<Integer> sieve(Integer max) {\n        ArrayList<Integer> primes = new ArrayList<Integer>();\n        for (int n=2; n<max+1; n++) {\n            if (any(list_comp(n, primes))) {\n                primes.add(n);\n            }\n        }\n        return primes;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"SIEVE.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'value' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'arr' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'value' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"The static method name 'list_comp' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'n' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'primes' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid excessively long variable names like built_comprehension\",\"rule\":\"LongVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'built_comprehension' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The local variable name 'built_comprehension' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"LocalVariableNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'p' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'max' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'primes' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":26}",
    "origin_num_problem": 26,
    "new_code": "package java_programs;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Sieve {\n\n    private Sieve() {\n        // private constructor to prevent instantiation\n    }\n\n    public static boolean all(final List<Boolean> booleanList) {\n        for (final boolean value : booleanList) {\n            if (!value) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean any(final List<Boolean> booleanList) {\n        for (final boolean value : booleanList) {\n            if (value) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static List<Boolean> buildComprehension(final int n, final List<Integer> primes) {\n        final List<Boolean> builtComprehension = new ArrayList<>();\n        for (final Integer p : primes) {\n            builtComprehension.add(n % p > 0);\n        }\n        return builtComprehension;\n    }\n\n    public static List<Integer> sieve(final int max) {\n        final List<Integer> primes = new ArrayList<>();\n        for (int n = 2; n < max + 1; n++) {\n            if (any(buildComprehension(n, primes))) {\n                primes.add(n);\n            }\n        }\n        return primes;\n    }\n}",
    "new_report": "{\"fileName\":\"SIEVE.java\",\"violations\":[{\"description\":\"This class has only private constructors and may be final\",\"rule\":\"ClassWithOnlyPrivateConstructorsShouldBeFinal\",\"ruleSet\":\"Design\",\"priority\":1},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like n\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid excessively long variable names like builtComprehension\",\"rule\":\"LongVariable\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "new_num_problem": 5,
    "is_same": 1,
    "description": "重构后的代码保留了原有代码的功能，仅对部分命名和格式进行了修改，未改变原有逻辑。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:09:01"
  },
  {
    "id": 43,
    "file_name": "SQRT.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class SQRT {\n    public static double sqrt(double x, double epsilon) {\n        double approx = x / 2d;\n        while (Math.abs(x-approx) > epsilon) {\n            approx = 0.5d * (approx + x / approx);\n        }\n        return approx;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"SQRT.java\",\"violations\":[{\"description\":\"Avoid short class names like SQRT\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid variables with short names like x\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'x' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'epsilon' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "origin_num_problem": 5,
    "new_code": "public class SquareRoot {\n    public static double calculateSqrt(final double number, final double epsilon) {\n        double approx = number / 2d;\n        while (Math.abs(number - approx) > epsilon) {\n            approx = 0.5d * (approx + number / approx);\n        }\n        return approx;\n    }\n}",
    "new_report": "{\"fileName\":\"SQRT.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3}],\"total\":2}",
    "new_num_problem": 2,
    "is_same": 1,
    "description": "代码保留了之前的功能，仅进行了一些重构，如更改类名和方法名，添加了参数的final修饰符，并格式化了代码。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:09:03"
  },
  {
    "id": 44,
    "file_name": "SUBSEQUENCES.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class SUBSEQUENCES {\n    public static ArrayList<ArrayList> subsequences(int a, int b, int k) {\n        if (k == 0) {\n            return new ArrayList();\n        }\n\n        ArrayList ret = new ArrayList(50);\n        for (int i=a; i<b+1-k; i++) {\n            ArrayList base = new ArrayList(50);\n            for (ArrayList rest : subsequences(i+1, b, k-1)) {\n                rest.add(0,i);\n                base.add(rest);\n            }\n            ret.addAll(base);\n\n        }\n\n        return ret;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"SUBSEQUENCES.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Avoid variables with short names like a\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'a' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like b\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'b' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like k\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'k' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Raw type use may be avoided by using a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'ret' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Raw type use may be avoided by using a diamond: `new ArrayList<>(50)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'base' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Raw type use may be avoided by using a diamond: `new ArrayList<>(50)`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'rest' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":20}",
    "origin_num_problem": 20,
    "new_code": "package java_programs;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Subsequences {\n    public static List<List<Integer>> subsequences(int start, int end, int length) {\n        if (length == 0) {\n            return new ArrayList<>();\n        }\n\n        List<List<Integer>> result = new ArrayList<>();\n        for (int i = start; i < end + 1 - length; i++) {\n            List<Integer> base = new ArrayList<>();\n            for (List<Integer> rest : subsequences(i + 1, end, length - 1)) {\n                rest.add(0, i);\n                base.add(new ArrayList<>(rest));\n            }\n            result.addAll(base);\n        }\n\n        return result;\n    }\n}",
    "new_report": "{\"fileName\":\"SUBSEQUENCES.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'start' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'end' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'length' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"A method should have only one exit point, and that should be the last statement in the method\",\"rule\":\"OnlyOneReturn\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'result' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'base' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid instantiating new objects inside loops\",\"rule\":\"AvoidInstantiatingObjectsInLoops\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Local variable 'rest' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "new_num_problem": 9,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仅进行了代码格式优化和命名规范调整，功能逻辑保持不变。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:09:05"
  },
  {
    "id": 45,
    "file_name": "TOPOLOGICAL_ORDERING.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\npublic class TOPOLOGICAL_ORDERING {\n    public static ArrayList<Node> topological_ordering (List<Node> directedGraph) {\n        ArrayList<Node> orderedNodes = new ArrayList<Node>();\n        for (Node node : directedGraph) {\n            if (node.getPredecessors().isEmpty()) {\n                orderedNodes.add(node);\n            }\n        }\n\n        int listSize = orderedNodes.size();\n        for (int i = 0; i < listSize; i++) {\n            Node node = orderedNodes.get(i);\n            for (Node nextNode : node.getSuccessors()) {\n                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n                    orderedNodes.add(nextNode);\n                    listSize++;\n                }\n            }\n        }\n        return orderedNodes;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"TOPOLOGICAL_ORDERING.java\",\"violations\":[{\"description\":\"The utility class name 'TOPOLOGICAL_ORDERING' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"The static method name 'topological_ordering' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Parameter 'directedGraph' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'orderedNodes' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'nextNode' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":11}",
    "origin_num_problem": 11,
    "new_code": "package java_programs;\nimport java.util.*;\n\npublic class TopologicalOrdering {\n    public static List<Node> topologicalOrdering(final List<Node> directedGraph) {\n        List<Node> orderedNodes = new ArrayList<>();\n        for (Node node : directedGraph) {\n            if (node.getPredecessors().isEmpty()) {\n                orderedNodes.add(node);\n            }\n        }\n\n        int listSize = orderedNodes.size();\n        for (int i = 0; i < listSize; i++) {\n            Node node = orderedNodes.get(i);\n            for (Node nextNode : node.getSuccessors()) {\n                if (orderedNodes.containsAll(nextNode.getSuccessors()) && !orderedNodes.contains(nextNode)) {\n                    orderedNodes.add(nextNode);\n                    listSize++;\n                }\n            }\n        }\n        return orderedNodes;\n    }\n}",
    "new_report": "{\"fileName\":\"TOPOLOGICAL_ORDERING.java\",\"violations\":[{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Local variable 'orderedNodes' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'node' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'nextNode' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":5}",
    "new_num_problem": 5,
    "is_same": 1,
    "description": "代码保留了原始的拓扑排序功能，只进行了重构和格式调整，没有改变原有逻辑",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:09:07"
  },
  {
    "id": 46,
    "file_name": "TO_BASE.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class TO_BASE {\n    public static String to_base(int num, int b) {\n        String result = \"\";\n        String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        int i;\n        while (num > 0) {\n            i = num % b;\n            num = num / b; // floor division?\n            result = result + String.valueOf(alphabet.charAt(i));\n        }\n\n        return result;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"TO_BASE.java\",\"violations\":[{\"description\":\"The utility class name 'TO_BASE' doesn't match '[A-Z][a-zA-Z0-9]*'\",\"rule\":\"ClassNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The static method name 'to_base' doesn't match '[a-z][a-zA-Z0-9]*'\",\"rule\":\"MethodNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Avoid variables with short names like b\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'b' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'alphabet' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid variables with short names like i\",\"rule\":\"ShortVariable\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid reassigning parameters such as 'num'\",\"rule\":\"AvoidReassigningParameters\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings\",\"rule\":\"UseStringBufferForStringAppends\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"No need to call String.valueOf to append to a string.\",\"rule\":\"UselessStringValueOf\",\"ruleSet\":\"Performance\",\"priority\":3}],\"total\":10}",
    "origin_num_problem": 10,
    "new_code": "\r\npublic class BaseConverterUtil {\r\n\r\n    public static String convertToBase(int number, int base) {\r\n        StringBuilder result = new StringBuilder();\r\n        String alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n        int remainder;\r\n        while (number > 0) {\r\n            remainder = number % base;\r\n            number = number / base;\r\n            result.insert(0, alphabet.charAt(remainder));\r\n        }\r\n\r\n        return result.toString();\r\n    }\r\n}",
    "new_report": "{\"fileName\":\"TO_BASE.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Parameter 'base' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'result' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'alphabet' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid reassigning parameters such as 'number'\",\"rule\":\"AvoidReassigningParameters\",\"ruleSet\":\"Best Practices\",\"priority\":2}],\"total\":6}",
    "new_num_problem": 6,
    "is_same": 1,
    "description": "重构后的代码保留了之前的功能，仍然是将一个十进制数转换为指定进制的字符串表示形式。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:09:09"
  },
  {
    "id": 47,
    "file_name": "WeightedEdge.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\npublic class WeightedEdge implements Comparable<WeightedEdge>{\n    public Node node1;\n    public Node node2;\n    public int weight;\n\n    public WeightedEdge () {\n        node1 = null;\n        node2 = null;\n        weight = 0;\n    }\n    public WeightedEdge (Node node1, Node node2, int weight) {\n        this.node1 = node1;\n        this.node2 = node2;\n        this.weight = weight;\n    }\n    public int compareTo(WeightedEdge compareNode) {\n        int compareWeight= ((WeightedEdge) compareNode).weight;\n\n        //ascending order\n        return this.weight - compareWeight;\n\n        //descending order\n        //return compareWeight - this.weight;\n    }\n}",
    "origin_report": "{\"fileName\":\"WeightedEdge.java\",\"violations\":[{\"description\":\"Assigning an Object to null is a code smell.  Consider refactoring.\",\"rule\":\"NullAssignment\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Assigning an Object to null is a code smell.  Consider refactoring.\",\"rule\":\"NullAssignment\",\"ruleSet\":\"Error Prone\",\"priority\":3},{\"description\":\"Parameter 'node1' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'node2' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'weight' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"The method 'compareTo(WeightedEdge)' is missing an @Override annotation.\",\"rule\":\"MissingOverride\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'compareNode' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'compareWeight' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Unnecessary cast (WeightedEdge)\",\"rule\":\"UnnecessaryCast\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "origin_num_problem": 9,
    "new_code": "package java_programs;\nimport java.util.*;\n\npublic class WeightedEdge implements Comparable<WeightedEdge>{\n    public Node node1;\n    public Node node2;\n    public int weight;\n\n    public WeightedEdge () {\n        this(null, null, 0);\n    }\n    public WeightedEdge (final Node node1, final Node node2, final int weight) {\n        this.node1 = node1;\n        this.node2 = node2;\n        this.weight = weight;\n    }\n    @Override\n    public int compareTo(final WeightedEdge compareNode) {\n        int compareWeight = compareNode.weight;\n\n        return Integer.compare(this.weight, compareWeight);\n    }\n}",
    "new_report": "{\"fileName\":\"WeightedEdge.java\",\"violations\":[{\"description\":\"Local variable 'compareWeight' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":1}",
    "new_num_problem": 1,
    "is_same": 1,
    "description": "重构后的代码保留了原始代码的功能，仍然实现了根据权重比较WeightedEdge对象的方法，并进行升序排序。",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:09:11"
  },
  {
    "id": 48,
    "file_name": "WRAP.java",
    "language_type": "java",
    "origin_code": "package java_programs;\nimport java.util.*;\n\n/*\n * To change this template, choose Tools | Templates\n * and open the template in the editor.\n */\n\n/**\n *\n * @author derricklin\n */\npublic class WRAP {\n    public static void main(String[] args) {\n        System.out.println(\"abc\".lastIndexOf(\"c\",30));\n    }\n\n    public static ArrayList<String> wrap(String text, int cols) {\n        ArrayList<String> lines = new ArrayList<String>();\n\n        String line;\n        while (text.length() > cols) {\n            int end = text.lastIndexOf(\" \", cols); // off by one?\n            if (end == -1) {\n                end = cols;\n            }\n            line = text.substring(0,end);\n            text = text.substring(end);\n            lines.add(line);\n        }\n\n        return lines;\n    }\n}\n",
    "origin_report": "{\"fileName\":\"WRAP.java\",\"violations\":[{\"description\":\"Avoid short class names like WRAP\",\"rule\":\"ShortClassName\",\"ruleSet\":\"Code Style\",\"priority\":4},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"Usage of System.out/err\",\"rule\":\"SystemPrintln\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"String.indexOf(char) is faster than String.indexOf(String).\",\"rule\":\"UseIndexOfChar\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Parameter 'cols' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Avoid using implementation types like 'ArrayList'; use the interface instead\",\"rule\":\"LooseCoupling\",\"ruleSet\":\"Best Practices\",\"priority\":3},{\"description\":\"Local variable 'lines' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`\",\"rule\":\"UseDiamondOperator\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"String.indexOf(char) is faster than String.indexOf(String).\",\"rule\":\"UseIndexOfChar\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Avoid reassigning parameters such as 'text'\",\"rule\":\"AvoidReassigningParameters\",\"ruleSet\":\"Best Practices\",\"priority\":2}],\"total\":11}",
    "origin_num_problem": 11,
    "new_code": "public class WrapUtil {\n    private static final Logger log = Logger.getLogger(WrapUtil.class.getName());\n\n    public static void main(String[] args) {\n        log.fine(\"abc\".lastIndexOf(\"c\", 30));\n    }\n\n    public static List<String> wrap(String text, int cols) {\n        List<String> lines = new ArrayList<>();\n\n        String remainingText = text;\n        while (remainingText.length() > cols) {\n            int end = remainingText.lastIndexOf(' ', cols); // off by one?\n            if (end == -1) {\n                end = cols;\n            }\n            String line = remainingText.substring(0, end).trim();\n            remainingText = remainingText.substring(end).trim();\n            lines.add(line);\n        }\n\n        if (!remainingText.isEmpty()) {\n            lines.add(remainingText);\n        }\n\n        return lines;\n    }\n}",
    "new_report": "{\"fileName\":\"WRAP.java\",\"violations\":[{\"description\":\"All classes, interfaces, enums and annotations must belong to a named package\",\"rule\":\"NoPackage\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"This utility class has a non-private constructor\",\"rule\":\"UseUtilityClass\",\"ruleSet\":\"Design\",\"priority\":3},{\"description\":\"The constant name 'log' doesn't match '[A-Z][A-Z_0-9]*'\",\"rule\":\"FieldNamingConventions\",\"ruleSet\":\"Code Style\",\"priority\":1},{\"description\":\"Logger calls should be surrounded by log level guards.\",\"rule\":\"GuardLogStatement\",\"ruleSet\":\"Best Practices\",\"priority\":2},{\"description\":\"String.indexOf(char) is faster than String.indexOf(String).\",\"rule\":\"UseIndexOfChar\",\"ruleSet\":\"Performance\",\"priority\":3},{\"description\":\"Parameter 'text' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Parameter 'cols' is not assigned and could be declared final\",\"rule\":\"MethodArgumentCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'lines' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3},{\"description\":\"Local variable 'line' could be declared final\",\"rule\":\"LocalVariableCouldBeFinal\",\"ruleSet\":\"Code Style\",\"priority\":3}],\"total\":9}",
    "new_num_problem": 9,
    "is_same": 1,
    "description": "重构后的代码保留了原始代码的功能，仍然是一个包含对字符串进行换行处理的方法",
    "create_time": "2024-05-09 00:12:36",
    "update_time": "2024-05-13 07:09:13"
  }
]